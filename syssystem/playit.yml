# site.yml
- name: Discover DBs
  hosts: all
  gather_facts: false
  become: true
  roles:
    - manage_sys

- name: Lock SYS/SYSTEM accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Lock accounts per DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

- name: Detect standby hosts
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Detect standby hostnames from Data Guard config
      include_role:
        name: manage_sys
        tasks_from: detect_standbys.yml

- name: Sync password files to standbys
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Sync password files
      include_role:
        name: manage_sys
        tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Manage user accounts per DB
      include_role:
        name: manage_sys
        tasks_from: manage_accounts.yml


---
- name: Parse /etc/oratab (non-commented, valid lines)
  shell: "awk -F: '$0 !~ /^#/ && NF >= 2 { print $1\":\"$2 }' /etc/oratab"
  register: oratab_lines
  changed_when: false

- name: Create SID ‚Üí ORACLE_HOME pairs
  set_fact:
    sid_home_pairs: "{{ oratab_lines.stdout_lines | map('split', ':') | list }}"

- name: Set discovered DB list
  set_fact:
    discovered_dbs: "{{ sid_home_pairs | map('first') | list }}"

- name: Set SID to ORACLE_HOME map
  set_fact:
    sid_home_map: "{{ dict(sid_home_pairs) }}"

- name: Debug discovered DBs
  debug:
    var: discovered_dbs

- name: Debug SID to ORACLE_HOME map
  debug:
    var: sid_home_map

# site.yml

- name: Lock SYS/SYSTEM accounts
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Include database discovery logic
      include_role:
        name: manage_sys

    - name: Lock SYS/SYSTEM for each DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

# lock_accounts.yml
---
- name: Lock SYS if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYS';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYS account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false

- name: Lock SYSTEM if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYSTEM';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYSTEM account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false


# roles/manage_sys/tasks/detect_standbys.yml
- name: Detect standby destinations from Data Guard
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ item }}
    export ORACLE_HOME={{ sid_home_map[item] }}
    export PATH=$ORACLE_HOME/bin:$PATH
    sqlplus -s / as sysdba <<EOF
    SET FEEDBACK OFF HEADING OFF PAGESIZE 0
    SELECT destination FROM v$archive_dest
     WHERE target='STANDBY' AND status='VALID'
       AND destination IS NOT NULL;
    EXIT;
    EOF
  loop: "{{ discovered_dbs }}"
  register: dg_destinations
  changed_when: false

- name: Extract unique standby hostnames
  set_fact:
    detected_standbys: >-
      {{ dg_destinations.results | map(attribute='stdout_lines') | list | flatten | map('regex_replace', '^.*@', '') | unique }}

# roles/manage_sys/tasks/sync.yml
- name: Copy password files to each detected standby host
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ detected_standbys | default([]) }}"
  vars:
    standby_host: "{{ item }}"
  block:
    - name: Copy password file for each DB
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      copy:
        src: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        dest: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        owner: oracle
        group: dba
        mode: '0600'
        remote_src: false


# roles/manage_sys/tasks/manage_accounts.yml
- name: Load DBA account definitions
  include_vars: "{{ playbook_dir }}/group_vars/dba_accounts/dba_accounts_list.yml"

- name: Load DBA password vars
  include_vars: "{{ playbook_dir }}/vault/dba_passwords.yml"

- name: Manage named DBA accounts
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ item.1 }}
    export ORACLE_HOME={{ sid_home_map[item.1] }}
    export PATH=$ORACLE_HOME/bin:$PATH

    PASSWORD="{{ lookup('vars', item.0.password_var) }}"
    LOG_FILE="/tmp/dba_account_{{ item.0.username }}_{{ item.1 }}.log"
    TIMESTAMP_FILE="{{ playbook_dir }}/vault/.timestamp_{{ item.0.password_var }}"

    if [ ! -f "$TIMESTAMP_FILE" ]; then
      touch -d '1900-01-01' "$TIMESTAMP_FILE"
    fi

    PASS_DATE=$(date -r "$TIMESTAMP_FILE" '+%Y-%m-%d %H:%M:%S')

    sqlplus -s / as sysdba <<EOF > \$LOG_FILE
    SET FEEDBACK OFF HEADING OFF
    DECLARE
      user_exists NUMBER;
      pw_change DATE;
      action VARCHAR2(50);
    BEGIN
      SELECT COUNT(*) INTO user_exists FROM dba_users WHERE username = UPPER('{{ item.0.username }}');

      IF user_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE USER {{ item.0.username }} IDENTIFIED BY "' || '{{ lookup('vars', item.0.password_var) }}' || '" ACCOUNT UNLOCK';
        action := 'User created';
      ELSE
        BEGIN
          SELECT password_change_date INTO pw_change FROM dba_users WHERE username = UPPER('{{ item.0.username }}');
        EXCEPTION WHEN OTHERS THEN pw_change := TO_DATE('1900-01-01','YYYY-MM-DD');
        END;

        IF pw_change < TO_DATE('{{ PASS_DATE }}', 'YYYY-MM-DD HH24:MI:SS') THEN
          EXECUTE IMMEDIATE 'ALTER USER {{ item.0.username }} IDENTIFIED BY "' || '{{ lookup('vars', item.0.password_var) }}' || '" ACCOUNT UNLOCK';
          action := 'Password updated';
        ELSE
          action := 'No change needed';
        END IF;
      END IF;

      DBMS_OUTPUT.PUT_LINE('Action: ' || action);
    END;
    /
    GRANT {{ item.0.roles | join(', ') }} TO {{ item.0.username }};
    EXIT;
    EOF
  loop: "{{ dba_accounts | product(discovered_dbs) | list }}"
  loop_control:
    label: "Managing {{ item.0.username }} on DB {{ item.1 }}"

- name: Display consolidated DBA account actions summary
  become: true
  shell: cat /tmp/dba_account_actions_summary.log
  register: summary_output

- name: Show summary of DBA account management
  debug:
    msg: "{{ summary_output.stdout_lines }}"

# roles/manage_sys/meta/main.yml
---
depends: []

# site.yml
---
- name: Lock SYS/SYSTEM and compute password file hashes
  hosts: all
  become: yes
  roles:
    - role: manage_sys

- name: Detect standby hosts from Data Guard config
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: detect_standbys.yml

- name: Sync password files to detected standby hosts
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: yes
  roles:
    - role: manage_sys
      tasks_from: manage_accounts.yml

# Mangage_dba_pass.sh
#!/bin/bash

VAULT_DIR="group_vars/dba_accounts"
VAULT_PASSWORD_FILE="${VAULT_PASSWORD_FILE:-~/.vault_pass}"

# Prompt for DBA ID
read -rp "Enter your DBA ID (numeric only, e.g., 123): " DBA_ID

if ! [[ "$DBA_ID" =~ ^[0-9]+$ ]]; then
  echo "‚ùå Invalid ID. Must be numeric."
  exit 1
fi

VAULT_FILE="${VAULT_DIR}/DBA_${DBA_ID}.yml"
VAR_NAME="vault_dba_${DBA_ID}_password"

# Prompt for action
echo "Choose action:"
select ACTION in "Create New" "Update Existing" "Cancel"; do
  case $REPLY in
    1) break ;;
    2) break ;;
    3) echo "Cancelled."; exit 0 ;;
    *) echo "Invalid option. Choose 1 or 2." ;;
  esac
done

# Prompt for password securely
read -rsp "Enter password for DBA_${DBA_ID}: " password1; echo
read -rsp "Confirm password: " password2; echo

if [[ "$password1" != "$password2" ]]; then
  echo "‚ùå Passwords do not match."
  exit 1
fi

# Create vault directory if missing
mkdir -p "$VAULT_DIR"

# Generate temp file
TMPFILE=$(mktemp)
echo "${VAR_NAME}: \"${password1}\"" > "$TMPFILE"

# Encrypt into final vault file
if [[ "$ACTION" == "Create New" && -f "$VAULT_FILE" ]]; then
  echo "‚ö†Ô∏è Vault file already exists. Choose 'Update Existing' to change password."
  rm -f "$TMPFILE"
  exit 1
fi

ansible-vault encrypt "$TMPFILE" --output "$VAULT_FILE" --vault-password-file "$VAULT_PASSWORD_FILE"
rm -f "$TMPFILE"

echo "‚úÖ Vault file saved as $VAULT_FILE"
echo "üîê Only you (with your password) can edit it:"
echo "    ansible-vault edit $VAULT_FILE --vault-password-file $VAULT_PASSWORD_FILE"
