# site.yml
- name: Discover DBs
  hosts: all
  gather_facts: false
  become: true
  roles:
    - manage_sys

- name: Lock SYS/SYSTEM accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Lock accounts per DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

- name: Detect standby hosts
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Detect standby hostnames from Data Guard config
      include_role:
        name: manage_sys
        tasks_from: detect_standbys.yml

- name: Sync password files to standbys
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Sync password files
      include_role:
        name: manage_sys
        tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Manage user accounts per DB
      include_role:
        name: manage_sys
        tasks_from: manage_accounts.yml


---
- name: Parse /etc/oratab (non-commented, valid lines)
  shell: "awk -F: '$0 !~ /^#/ && NF >= 2 { print $1\":\"$2 }' /etc/oratab"
  register: oratab_lines
  changed_when: false

- name: Create SID → ORACLE_HOME pairs
  set_fact:
    sid_home_pairs: "{{ oratab_lines.stdout_lines | map('split', ':') | list }}"

- name: Set discovered DB list
  set_fact:
    discovered_dbs: "{{ sid_home_pairs | map('first') | list }}"

- name: Set SID to ORACLE_HOME map
  set_fact:
    sid_home_map: "{{ dict(sid_home_pairs) }}"

- name: Debug discovered DBs
  debug:
    var: discovered_dbs

- name: Debug SID to ORACLE_HOME map
  debug:
    var: sid_home_map

# site.yml

- name: Lock SYS/SYSTEM accounts
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Include database discovery logic
      include_role:
        name: manage_sys

    - name: Lock SYS/SYSTEM for each DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

# lock_accounts.yml
---
- name: Lock SYS if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYS';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYS account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false

- name: Lock SYSTEM if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYSTEM';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYSTEM account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false


# roles/manage_sys/tasks/detect_standbys.yml
- name: Detect standby destinations from Data Guard
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ item }}
    export ORACLE_HOME={{ sid_home_map[item] }}
    export PATH=$ORACLE_HOME/bin:$PATH
    sqlplus -s / as sysdba <<EOF
    SET FEEDBACK OFF HEADING OFF PAGESIZE 0
    SELECT destination FROM v$archive_dest
     WHERE target='STANDBY' AND status='VALID'
       AND destination IS NOT NULL;
    EXIT;
    EOF
  loop: "{{ discovered_dbs }}"
  register: dg_destinations
  changed_when: false

- name: Extract unique TNS aliases from archive destinations
  set_fact:
    tns_aliases: >-
      {{ dg_destinations.results
         | map(attribute='stdout_lines')
         | flatten
         | map('regex_replace', '^.*@', '')
         | unique
      }}

- name: Resolve each TNS alias to host using tnsping
  become: true
  become_user: oracle
  shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    tnsping {{ item }} | grep "Attempting to contact" | sed -E 's/.*HOST *= *([^)]*).*/\1/'
  loop: "{{ tns_aliases }}"
  register: resolved_hosts
  changed_when: false
  failed_when: resolved_hosts.rc != 0

- name: Extract unique standby hostnames
  set_fact:
    detected_standbys: "{{ resolved_hosts.results | map(attribute='stdout') | map('trim') | select('match', '.+') | list | unique }}"

# roles/manage_sys/tasks/sync.yml
- name: Copy password files to each detected standby host
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ detected_standbys | default([]) }}"
  vars:
    standby_host: "{{ item }}"
  block:
    - name: Copy password file for each DB
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      copy:
        src: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        dest: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        owner: oracle
        group: dba
        mode: '0600'
        remote_src: false


# roles/manage_sys/tasks/manage_accounts.yml
---
- name: Load DBA account list
  include_vars:
    file: "{{ playbook_dir }}/group_vars/dba_accounts/dba_accounts_list.yml"
    name: dba_accounts

- name: Detect if DB is multitenant (CDB)
  become: true
  become_user: oracle
  vars:
    oracle_home: "{{ sid_home_map[db_name] }}"
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    sqlplus -S / as sysdba <<EOF
    SET HEADING OFF
    SET FEEDBACK OFF
    SELECT CDB FROM V\$DATABASE;
    EXIT;
    EOF
  loop: "{{ discovered_dbs }}"
  loop_control:
    loop_var: db_name
  register: cdb_check_results
  changed_when: false

- name: Debug CDB detection results
  debug:
    var: cdb_check_results.results

- name: Set CDB fact map per DB
  set_fact:
    is_cdb_map: >-
      {{
        dict(
          cdb_check_results.results
          | map(attribute='item') 
          | zip(
              cdb_check_results.results
              | map(attribute='stdout')
              | map('trim')
              | map('lower')
              | map('regex_search', '^yes')
              | map('bool')
          )
        )
      }}

- name: Ensure summary log file is reset
  become: true
  shell: rm -f /tmp/manage_accounts_summary.log

- name: Manage named DBA accounts
  become: true
  become_user: oracle
  vars:
    dba_pairs: "{{ dba_accounts.dba_accounts | product(discovered_dbs) | list }}"
  loop: "{{ dba_pairs }}"
  loop_control:
    label: "Managing {{ item.0.username }} on {{ item.1 }}"
  vars:
    account_name: "{{ 'C##' ~ item.0.username if is_cdb_map[item.1] | default(false) else item.0.username }}"
    container_clause: "{{ 'CONTAINER=ALL' if is_cdb_map[item.1] | default(false) else '' }}"
    password_file: "{{ playbook_dir }}/group_vars/dba_accounts/{{ item.0.username }}.yml"
    password_value: "{{ (lookup('file', password_file) | from_yaml)[item.0.password_var] }}"
  shell: |
    export ORACLE_SID={{ item.1 }}
    export ORACLE_HOME={{ sid_home_map[item.1] }}
    export PATH=$ORACLE_HOME/bin:$PATH

    FILE_TIMESTAMP=$(date -r "{{ password_file }}" '+%Y-%m-%d %H:%M:%S')
    LOG_FILE="/tmp/manage_{{ item.0.username }}_{{ item.1 }}.log"
    SUMMARY_FILE="/tmp/manage_accounts_summary.log"

    sqlplus -s / as sysdba > "$LOG_FILE" <<EOF
    SET HEADING OFF
    SET FEEDBACK OFF
    DECLARE
      user_exists NUMBER := 0;
      pw_change DATE := TO_DATE('1900-01-01','YYYY-MM-DD');
      action VARCHAR2(100);
    BEGIN
      BEGIN
        SELECT COUNT(*) INTO user_exists FROM dba_users WHERE username = UPPER('{{ account_name }}');
      EXCEPTION WHEN OTHERS THEN user_exists := 0;
      END;

      IF user_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE USER {{ account_name }} IDENTIFIED BY "{{ password_value }}" {{ container_clause }} ACCOUNT UNLOCK';
        action := 'User created';
      ELSE
        BEGIN
          SELECT password_change_date INTO pw_change FROM dba_users WHERE username = UPPER('{{ account_name }}');
        EXCEPTION WHEN OTHERS THEN NULL;
        END;

        IF pw_change < TO_DATE('{{ FILE_TIMESTAMP }}', 'YYYY-MM-DD HH24:MI:SS') THEN
          EXECUTE IMMEDIATE 'ALTER USER {{ account_name }} IDENTIFIED BY "{{ password_value }}" ACCOUNT UNLOCK';
          action := 'Password updated';
        ELSE
          action := 'No change needed';
        END IF;
      END IF;

      DBMS_OUTPUT.PUT_LINE('Action: ' || action);
    END;
    /
    GRANT {{ item.0.roles | map('quote') | join(', ') }} TO {{ account_name }} {{ container_clause }};
    EOF

    ACTION_LINE=$(grep 'Action:' "$LOG_FILE" | awk -F: '{print $2}' | xargs | tr -d '"')
    echo "{{ account_name }} on {{ item.1 }}: $ACTION_LINE" >> "$SUMMARY_FILE"
  args:
    executable: /bin/bash

- name: Display consolidated DBA account actions summary
  become: true
  shell: cat /tmp/manage_accounts_summary.log || echo "No actions performed."
  register: summary_output

- name: Show summary
  debug:
    msg: "{{ summary_output.stdout_lines }}"


# roles/manage_sys/meta/main.yml
---
dependencies: []

# site.yml
---
- name: Lock SYS/SYSTEM and compute password file hashes
  hosts: all
  become: yes
  roles:
    - role: manage_sys

- name: Detect standby hosts from Data Guard config
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: detect_standbys.yml

- name: Sync password files to detected standby hosts
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: yes
  roles:
    - role: manage_sys
      tasks_from: manage_accounts.yml

# Mangage_dba_pass.sh
#!/bin/bash

# === Secure Vault Creator for DBA Passwords ===

VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_dba"
VAULT_DIR="group_vars/dba_accounts"

read -rp "Enter your numeric DBA ID (e.g. 123): " DBA_ID

# Validate numeric ID
if [[ ! "$DBA_ID" =~ ^[0-9]+$ ]]; then
  echo "❌ Error: DBA ID must be numeric."
  exit 1
fi

DBA_USER="DBA_${DBA_ID}"
PASSWORD_VAR="dba_${DBA_ID}_password"
VAULT_FILE="${VAULT_DIR}/${DBA_USER}.yml"

mkdir -p "$VAULT_DIR"

read -rsp "Enter password for ${DBA_USER}: " PASSWORD
echo
read -rsp "Confirm password: " PASSWORD_CONFIRM
echo

if [[ "$PASSWORD" != "$PASSWORD_CONFIRM" ]]; then
  echo "❌ Error: Passwords do not match."
  exit 1
fi

# Create encrypted vault file
ansible-vault encrypt_string \
  --vault-id "${VAULT_ID}@${VAULT_PASS_FILE}" \
  "$PASSWORD" --name "$PASSWORD_VAR" > "$VAULT_FILE"

# Lock permissions to DBA user only
chown "$USER":"oracle" "$VAULT_FILE"
chmod 600 "$VAULT_FILE"

# Done
if [[ $? -eq 0 ]]; then
  echo "✅ Vault file created at: $VAULT_FILE"
  echo "🔐 Vault variable: $PASSWORD_VAR"
else
  echo "❌ Failed to create vault file"
  exit 1
fi

ansible localhost -m debug -a "msg={{ lookup('file', 'group_vars/dba_accounts/DBA_123.yml') | from_yaml }}"
--vault-id dba@/home/oracle/.vault_pass

mkdir -p group_vars/dba_accounts

# Step 1: Create a plain YAML file
cat <<EOF > group_vars/dba_accounts/DBA_123.yml
dba_password: mySecretPass123
EOF

# Step 2: Encrypt it with the correct vault ID
ansible-vault encrypt group_vars/dba_accounts/DBA_123.yml \
  --vault-id dba_vault@/home/oracle/.vault_pass


echo "test_var: secret" > test.yml
ansible-vault encrypt test.yml --vault-id dba_vault@/home/oracle/.vault_pass
ansible-vault view test.yml --vault-id dba_vault@/home/oracle/.vault_pass

mkdir -p group_vars/dba_accounts

# Step 1: Create a plain YAML file
cat <<EOF > group_vars/dba_accounts/DBA_123.yml
dba_password: mySecretPass123
EOF

# Step 2: Encrypt it with the correct vault ID
ansible-vault encrypt group_vars/dba_accounts/DBA_123.yml \
  --vault-id dba_vault@/home/oracle/.vault_pass
  
  
#!/bin/bash

# Configuration
VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_pass"
VAULT_DIR="group_vars/dba_accounts"
VAR_NAME="dba_password"

# Prompt for input
read -p "Enter your DBA numeric ID (e.g. 123): " DBA_ID

# Validate ID
if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
  echo "❌ Invalid ID. Must be numeric."
  exit 1
fi

# Prompt for password (hidden input)
read -s -p "Enter password: " PASSWORD
echo
read -s -p "Confirm password: " CONFIRM
echo

if [[ "$PASSWORD" != "$CONFIRM" ]]; then
  echo "❌ Passwords do not match."
  exit 1
fi

# Prepare vault directory
mkdir -p "$VAULT_DIR"

# Generate temp YAML
TMPFILE=$(mktemp)
echo "$VAR_NAME: \"$PASSWORD\"" > "$TMPFILE"

# Encrypt with vault ID
VAULT_FILE="${VAULT_DIR}/DBA_${DBA_ID}.yml"
ansible-vault encrypt "$TMPFILE" --output "$VAULT_FILE" \
  --vault-id "$VAULT_ID@$VAULT_PASS_FILE"

# Cleanup
rm -f "$TMPFILE"

echo "✅ Vault file created: $VAULT_FILE"


SELECT
    u.username,
    u.account_status,
    u.lock_date,
    u.expiry_date,
    u.created,
    u.profile,
    u.authentication_type,
    u.last_login,
    lpt.password_change_time AS last_password_change,
    r.roles,
    p.system_privileges
FROM
    dba_users u
LEFT JOIN (
    SELECT username, MAX(password_change_time) AS password_change_time
    FROM dba_users_with_defpwd
    GROUP BY username
) lpt ON u.username = lpt.username
LEFT JOIN (
    SELECT grantee, LISTAGG(granted_role, ', ') WITHIN GROUP (ORDER BY granted_role) AS roles
    FROM dba_role_privs
    GROUP BY grantee
) r ON u.username = r.grantee
LEFT JOIN (
    SELECT grantee, LISTAGG(privilege, ', ') WITHIN GROUP (ORDER BY privilege) AS system_privileges
    FROM dba_sys_privs
    GROUP BY grantee
) p ON u.username = p.grantee
ORDER BY u.username;


#!/usr/bin/env python3
import yaml
import sys
from pathlib import Path

VAULT_FILE_LIST = Path("group_vars/dba_accounts/dba_accounts_list.yml")

username = sys.argv[1]
roles_input = sys.argv[2].split(",")
password_var = "dba_password"

VAULT_FILE_LIST.parent.mkdir(parents=True, exist_ok=True)
if not VAULT_FILE_LIST.exists():
    VAULT_FILE_LIST.write_text("dba_accounts: []\n")

with VAULT_FILE_LIST.open("r") as f:
    data = yaml.safe_load(f)

if not data or 'dba_accounts' not in data:
    data = {'dba_accounts': []}

input_roles_set = set(role.upper() for role in roles_input)
updated = False

for idx, entry in enumerate(data['dba_accounts']):
    if entry['username'] == username:
        existing_roles_set = set(role.upper() for role in entry.get('roles', []))
        if existing_roles_set == input_roles_set:
            print(f"✅ {username} already exists with same roles. No changes.")
            break
        else:
            data['dba_accounts'][idx] = {
                'username': username,
                'roles': list(input_roles_set),
                'password_var': password_var
            }
            updated = True
            print(f"🔁 Updated roles for {username}.")
            break
else:
    data['dba_accounts'].append({
        'username': username,
        'roles': list(input_roles_set),
        'password_var': password_var
    })
    updated = True
    print(f"➕ Added new entry for {username}.")

if updated:
    with VAULT_FILE_LIST.open("w") as f:
        yaml.dump(data, f, default_flow_style=False, sort_keys=False)


#!/bin/bash

# Configuration
VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_pass"
VAULT_DIR="group_vars/dba_accounts"
PYTHON_HELPER="./update_dba_accounts_list.py"
VAR_NAME="dba_password"
VALID_ROLES=("SYSDBA" "SYSBACKUP" "SYSOPER" "DBA")

# Prompt for DBA ID
read -p "Enter your DBA numeric ID (e.g. 123): " DBA_ID
if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
  echo "❌ Invalid ID. Must be numeric."
  exit 1
fi

USERNAME="DBA_${DBA_ID}"

# Prompt for password
read -s -p "Enter password: " PASSWORD
echo
read -s -p "Confirm password: " CONFIRM
echo
if [[ "$PASSWORD" != "$CONFIRM" ]]; then
  echo "❌ Passwords do not match."
  exit 1
fi

# Prompt for roles
echo "Available roles: ${VALID_ROLES[*]}"
read -p "Enter roles (comma-separated): " ROLES_INPUT

IFS=',' read -ra ROLES_ARRAY <<< "$ROLES_INPUT"
VALIDATED_ROLES=()
for role in "${ROLES_ARRAY[@]}"; do
  role_trimmed=$(echo "$role" | xargs | tr '[:lower:]' '[:upper:]')
  if [[ " ${VALID_ROLES[*]} " =~ " ${role_trimmed} " ]]; then
    VALIDATED_ROLES+=("$role_trimmed")
  else
    echo "❌ Invalid role: $role_trimmed"
    exit 1
  fi
done

ROLES_CSV=$(IFS=','; echo "${VALIDATED_ROLES[*]}")

# Encrypt password to per-user vault file
mkdir -p "$VAULT_DIR"
VAULT_FILE="${VAULT_DIR}/${USERNAME}.yml"
TMPPASS=$(mktemp)
echo "$VAR_NAME: \"$PASSWORD\"" > "$TMPPASS"

ansible-vault encrypt "$TMPPASS" --output "$VAULT_FILE" \
  --vault-id "$VAULT_ID@$VAULT_PASS_FILE"
rm -f "$TMPPASS"
echo "✅ Password vault saved to: $VAULT_FILE"

# Update the dba_accounts_list using Python
if [[ ! -x "$PYTHON_HELPER" ]]; then
  echo "❌ Python helper not found or not executable: $PYTHON_HELPER"
  exit 1
fi

"$PYTHON_HELPER" "$USERNAME" "$ROLES_CSV"




#!/usr/bin/env python3

import yaml
import sys
import shutil
from pathlib import Path
from datetime import datetime
from tempfile import NamedTemporaryFile

# === CONFIGURATION ===
VAULT_FILE_LIST = Path("group_vars/dba_accounts/dba_accounts_list.yml")
BACKUP_SUFFIX = datetime.now().strftime("%Y%m%d_%H%M%S")
BACKUP_FILE = VAULT_FILE_LIST.with_name(VAULT_FILE_LIST.stem + f".bak_{BACKUP_SUFFIX}.yml")

# === INPUT ===
if len(sys.argv) != 3:
    print("Usage: update_dba_accounts_list.py DBA_<ID> SYSDBA,SYSBACKUP,...")
    sys.exit(1)

username = sys.argv[1]
roles_input = sys.argv[2].split(",")
password_var = "dba_password"

# Ensure directory exists
VAULT_FILE_LIST.parent.mkdir(parents=True, exist_ok=True)

# Initialize file if missing
if not VAULT_FILE_LIST.exists():
    VAULT_FILE_LIST.write_text("dba_accounts: []\n")

# Backup the original file
shutil.copy2(VAULT_FILE_LIST, BACKUP_FILE)
print(f"📦 Backup created: {BACKUP_FILE}")

# Load YAML
with VAULT_FILE_LIST.open("r") as f:
    data = yaml.safe_load(f)

# Initialize structure if needed
if not data or 'dba_accounts' not in data:
    data = {'dba_accounts': []}

# Normalize roles
input_roles_set = set(role.upper() for role in roles_input)
updated = False

# Process entries
for idx, entry in enumerate(data['dba_accounts']):
    if entry['username'] == username:
        existing_roles_set = set(role.upper() for role in entry.get('roles', []))
        if existing_roles_set == input_roles_set:
            print(f"✅ {username} already exists with same roles. No changes.")
            break
        else:
            data['dba_accounts'][idx] = {
                'username': username,
                'roles': sorted(list(input_roles_set)),
                'password_var': password_var
            }
            updated = True
            print(f"🔁 Updated roles for {username}.")
            break
else:
    data['dba_accounts'].append({
        'username': username,
        'roles': sorted(list(input_roles_set)),
        'password_var': password_var
    })
    updated = True
    print(f"➕ Added new entry for {username}.")

# Safe write
if updated:
    with NamedTemporaryFile("w", delete=False) as tmpf:
        yaml.dump(data, tmpf, default_flow_style=False)
        tmp_path = tmpf.name
    shutil.move(tmp_path, VAULT_FILE_LIST)
    print(f"✅ Updated: {VAULT_FILE_LIST}")






#!/bin/bash

# Configuration
VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_pass"
VAULT_DIR="group_vars/dba_accounts"
VAULT_LIST_SCRIPT="./manage_dba_accounts.py"
VAR_NAME="dba_password"
VALID_ROLES=("SYSDBA" "SYSBACKUP" "SYSOPER" "DBA")

# === DELETE MODE ===
if [[ "$1" == "--delete" && -n "$2" ]]; then
  DBA_ID="$2"
  USERNAME="DBA_${DBA_ID}"
  if [[ ! -x "$VAULT_LIST_SCRIPT" ]]; then
    echo "❌ Python script not found or not executable: $VAULT_LIST_SCRIPT"
    exit 1
  fi
  "$VAULT_LIST_SCRIPT" --delete "$DBA_ID"
  exit $?
fi

# === CREATE/UPDATE MODE ===

# Prompt for DBA ID
read -p "Enter your DBA numeric ID (e.g. 123): " DBA_ID
if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
  echo "❌ Invalid ID. Must be numeric."
  exit 1
fi

USERNAME="DBA_${DBA_ID}"

# Prompt for password
read -s -p "Enter password: " PASSWORD
echo
read -s -p "Confirm password: " CONFIRM
echo
if [[ "$PASSWORD" != "$CONFIRM" ]]; then
  echo "❌ Passwords do not match."
  exit 1
fi

# Prompt for roles
echo "Available roles: ${VALID_ROLES[*]}"
read -p "Enter roles (comma-separated): " ROLES_INPUT

IFS=',' read -ra ROLES_ARRAY <<< "$ROLES_INPUT"
VALIDATED_ROLES=()
for role in "${ROLES_ARRAY[@]}"; do
  role_trimmed=$(echo "$role" | xargs | tr '[:lower:]' '[:upper:]')
  if [[ " ${VALID_ROLES[*]} " =~ " ${role_trimmed} " ]]; then
    VALIDATED_ROLES+=("$role_trimmed")
  else
    echo "❌ Invalid role: $role_trimmed"
    exit 1
  fi
done

ROLES_CSV=$(IFS=','; echo "${VALIDATED_ROLES[*]}")

# Encrypt password into vault
mkdir -p "$VAULT_DIR"
VAULT_FILE="${VAULT_DIR}/${USERNAME}.yml"
TMPPASS=$(mktemp)
echo "$VAR_NAME: \"$PASSWORD\"" > "$TMPPASS"

ansible-vault encrypt "$TMPPASS" --output "$VAULT_FILE" \
  --vault-id "$VAULT_ID@$VAULT_PASS_FILE"
rm -f "$TMPPASS"
echo "✅ Password vault saved to: $VAULT_FILE"

# Update metadata using Python
if [[ ! -x "$VAULT_LIST_SCRIPT" ]]; then
  echo "❌ Python script not found or not executable: $VAULT_LIST_SCRIPT"
  exit 1
fi

"$VAULT_LIST_SCRIPT" "$USERNAME" "$ROLES_CSV"



#!/usr/bin/env python3

import yaml
import sys
from pathlib import Path
from datetime import datetime
from tempfile import NamedTemporaryFile
import shutil
import os

# === CONFIGURATION ===
VAULT_DIR = Path("group_vars/dba_accounts")
VAULT_FILE_LIST = VAULT_DIR / "dba_accounts_list.yml"
PASSWORD_VAR = "dba_password"

# === FUNCTIONS ===

def load_yaml_file(path):
    if not path.exists():
        return {'dba_accounts': []}
    with path.open("r") as f:
        try:
            return yaml.safe_load(f) or {'dba_accounts': []}
        except yaml.YAMLError as e:
            print(f"❌ YAML read error: {e}")
            sys.exit(1)

def backup_file(path):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup = path.with_suffix(f".yml.bak.{timestamp}")
    shutil.copy2(path, backup)
    print(f"📦 Backup saved as: {backup}")
    return backup

def write_yaml_safely(data, path):
    with NamedTemporaryFile("w", delete=False) as tmpf:
        yaml.dump(data, tmpf, default_flow_style=False)
    shutil.move(tmpf.name, path)
    print(f"✅ YAML written to: {path}")

def ensure_dir():
    VAULT_DIR.mkdir(parents=True, exist_ok=True)
    if not VAULT_FILE_LIST.exists():
        VAULT_FILE_LIST.write_text("dba_accounts: []\n")

# === ADD or UPDATE ===
def add_or_update_user(username, roles):
    data = load_yaml_file(VAULT_FILE_LIST)
    input_roles_set = set(role.upper() for role in roles)

    for idx, entry in enumerate(data['dba_accounts']):
        if entry['username'] == username:
            entry_roles = set(role.upper() for role in entry.get('roles', []))
            if entry_roles == input_roles_set and entry.get('status', 'active') == 'active':
                print(f"✅ {username} already exists with same roles and status. No changes.")
                return
            else:
                data['dba_accounts'][idx] = {
                    'username': username,
                    'roles': sorted(input_roles_set),
                    'password_var': PASSWORD_VAR,
                    'status': 'active'
                }
                print(f"🔁 Updated roles/status for {username}.")
                break
    else:
        data['dba_accounts'].append({
            'username': username,
            'roles': sorted(input_roles_set),
            'password_var': PASSWORD_VAR,
            'status': 'active'
        })
        print(f"➕ Added new entry for {username}.")

    backup_file(VAULT_FILE_LIST)
    write_yaml_safely(data, VAULT_FILE_LIST)

# === DELETE ===
def delete_user(dba_id):
    username = f"DBA_{dba_id}"
    vault_file = VAULT_DIR / f"{username}.yml"
    data = load_yaml_file(VAULT_FILE_LIST)
    found = False

    for idx, entry in enumerate(data['dba_accounts']):
        if entry['username'] == username:
            data['dba_accounts'][idx]['status'] = 'inactive'
            found = True
            break

    if not found:
        print(f"⚠️ No entry found for {username} in dba_accounts_list.yml.")
    else:
        print(f"🛑 Marked {username} as inactive in dba_accounts_list.yml.")

    if vault_file.exists():
        os.remove(vault_file)
        print(f"🗑️  Deleted vault file: {vault_file}")
    else:
        print(f"⚠️ Vault file not found: {vault_file}")

    backup_file(VAULT_FILE_LIST)
    write_yaml_safely(data, VAULT_FILE_LIST)

# === MAIN ENTRY ===
def main():
    ensure_dir()

    if len(sys.argv) >= 3 and sys.argv[1] == "--delete":
        dba_id = sys.argv[2]
        delete_user(dba_id)
    elif len(sys.argv) == 3:
        username = sys.argv[1]
        roles = sys.argv[2].split(",")
        add_or_update_user(username, roles)
    else:
        print("Usage:")
        print("  To add/update: manage_dba_accounts.py DBA_<ID> SYSDBA,DBA")
        print("  To delete:     manage_dba_accounts.py --delete <ID>")
        sys.exit(1)

if __name__ == "__main__":
    main()




#!/bin/bash

# Configuration
VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_pass"
VAULT_DIR="group_vars/dba_accounts"
VAULT_LIST_SCRIPT="./manage_dba_accounts.py"
VAR_NAME="dba_password"
VALID_ROLES=("SYSDBA" "SYSBACKUP" "SYSOPER" "DBA")

# Ensure Python helper exists
if [[ ! -x "$VAULT_LIST_SCRIPT" ]]; then
  echo "❌ Required Python script not found or not executable: $VAULT_LIST_SCRIPT"
  exit 1
fi

# === Menu Prompt ===
echo "Select action:"
echo "  [1] Create"
echo "  [2] Modify"
echo "  [3] Delete"
echo "  [Q] Quit"
read -p "Enter choice: " ACTION

ACTION=${ACTION^^}  # uppercase

if [[ "$ACTION" == "Q" ]]; then
  echo "Bye!"
  exit 0
elif [[ "$ACTION" == "3" ]]; then
  read -p "Enter DBA numeric ID to delete (e.g. 123): " DBA_ID
  if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
    echo "❌ Invalid ID. Must be numeric."
    exit 1
  fi
  "$VAULT_LIST_SCRIPT" --delete "$DBA_ID"
  exit $?
elif [[ "$ACTION" == "1" || "$ACTION" == "2" ]]; then
  # Shared flow for create or modify
  read -p "Enter DBA numeric ID (e.g. 123): " DBA_ID
  if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
    echo "❌ Invalid ID. Must be numeric."
    exit 1
  fi
  USERNAME="DBA_${DBA_ID}"

  # Prompt for password
  read -s -p "Enter password: " PASSWORD
  echo
  read -s -p "Confirm password: " CONFIRM
  echo
  if [[ "$PASSWORD" != "$CONFIRM" ]]; then
    echo "❌ Passwords do not match."
    exit 1
  fi

  # Prompt for roles
  echo "Available roles: ${VALID_ROLES[*]}"
  read -p "Enter roles (comma-separated): " ROLES_INPUT

  IFS=',' read -ra ROLES_ARRAY <<< "$ROLES_INPUT"
  VALIDATED_ROLES=()
  for role in "${ROLES_ARRAY[@]}"; do
    role_trimmed=$(echo "$role" | xargs | tr '[:lower:]' '[:upper:]')
    if [[ " ${VALID_ROLES[*]} " =~ " ${role_trimmed} " ]]; then
      VALIDATED_ROLES+=("$role_trimmed")
    else
      echo "❌ Invalid role: $role_trimmed"
      exit 1
    fi
  done

  ROLES_CSV=$(IFS=','; echo "${VALIDATED_ROLES[*]}")

  # Encrypt password into vault
  mkdir -p "$VAULT_DIR"
  VAULT_FILE="${VAULT_DIR}/${USERNAME}.yml"
  TMPPASS=$(mktemp)
  echo "$VAR_NAME: \"$PASSWORD\"" > "$TMPPASS"

  ansible-vault encrypt "$TMPPASS" --output "$VAULT_FILE" \
    --vault-id "$VAULT_ID@$VAULT_PASS_FILE"
  rm -f "$TMPPASS"
  echo "✅ Password vault saved to: $VAULT_FILE"

  # Update metadata
  "$VAULT_LIST_SCRIPT" "$USERNAME" "$ROLES_CSV"

else
  echo "❌ Invalid option."
  exit 1
fi




- name: Set Oracle environment variables
  ansible.builtin.set_fact:
    oracle_sid: "{{ oracle_sid | default(ansible_hostname | upper) }}"
    oracle_home: "{{ oracle_home }}"   # define or register this beforehand
    pwfile_path: "{{ oracle_home }}/dbs/orapw{{ oracle_sid }}"

- name: Check if Oracle password file exists
  ansible.builtin.stat:
    path: "{{ pwfile_path }}"
  register: pwfile_stat

- name: Fail if password file not found
  ansible.builtin.fail:
    msg: "Oracle password file not found at {{ pwfile_path }}"
  when: not pwfile_stat.stat.exists

- name: Describe the Oracle password file format
  ansible.builtin.command: "{{ oracle_home }}/bin/orapwd describe file={{ pwfile_path }}"
  register: orapwd_output
  changed_when: false

- name: Extract password file format version
  ansible.builtin.set_fact:
    pwfile_format: "{{ orapwd_output.stdout | regex_search('format=(\\d+(\\.\\d+)?)', '\\1') }}"

- name: Debug format
  ansible.builtin.debug:
    msg: "Password file format is {{ pwfile_format }}"

- name: Fail if password file format is not 12.2
  ansible.builtin.fail:
    msg: "Password file format is not 12.2. Found {{ pwfile_format }}"
  when: pwfile_format != '12.2'



- name: Recreate password file if format is not 12.2
  block:
    - name: Set fully qualified password file and backup path
      ansible.builtin.set_fact:
        pwfile_path: "{{ oracle_home }}/dbs/orapw{{ oracle_sid }}"
        pwfile_backup: "{{ oracle_home }}/dbs/orapw{{ oracle_sid }}.backup.{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"

    - name: Backup original password file
      ansible.builtin.command: mv "{{ pwfile_path }}" "{{ pwfile_backup }}"

    - name: Recreate password file using orapwd with format 12.2
      ansible.builtin.command: >
        {{ oracle_home }}/bin/orapwd
        file={{ pwfile_path }}
        format=12.2
        input_file={{ pwfile_backup }}

    - name: Describe password file again to verify format
      ansible.builtin.command: "{{ oracle_home }}/bin/orapwd describe file={{ pwfile_path }}"
      register: orapwd_verify
      changed_when: false

    - name: Set fact with verified password file format
      ansible.builtin.set_fact:
        pwfile_format_recheck: "{{ orapwd_verify.stdout | regex_search('format=(\\d+(\\.\\d+)?)', '\\1') }}"

    - name: Fail if recreated password file is not 12.2
      ansible.builtin.fail:
        msg: "❌ Recreated password file is not 12.2. Found {{ pwfile_format_recheck }}"
      when: pwfile_format_recheck != '12.2'

    - name: Report successful recreation
      ansible.builtin.debug:
        msg: "✅ Password file successfully recreated with format 12.2. Backup stored at {{ pwfile_backup }}"

  when: pwfile_format != '12.2'



- name: Configure Data Guard transport user
  hosts: primary_db_hosts
  become: yes
  vars:
    transport_user_cdb: "C##DBA_DGADMIN"
    transport_user_non_cdb: "DBA_DGADMIN"
    transport_user_password: "{{ vault_dba_dgadmin_password }}"
    redo_user: ""
  roles:
    - dataguard_user_setup


- name: Check redo_transport_user parameter
  include_tasks: check_redo_transport_user.yml

- name: Check if SYS account is locked
  include_tasks: check_sys_locked.yml
  when: redo_user == ""

- name: Check and create transport user if needed
  include_tasks: check_create_transport_user.yml
  when: redo_user == "" and sys_locked.stdout.find("LOCKED") != -1

- name: Sync password file to standby
  include_tasks: sync_passwordfile.yml
  when: redo_user == "" and sys_locked.stdout.find("LOCKED") != -1

- name: Set redo_transport_user to new user
  include_tasks: set_redo_transport_user.yml
  when: redo_user == "" and sys_locked.stdout.find("LOCKED") != -1



- name: Get current redo_transport_user
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    set heading off feedback off
    show parameter redo_transport_user
    exit
    EOF
  register: redo_user_check

- set_fact:
    redo_user: "{{ redo_user_check.stdout_lines | select('match', 'redo_transport_user') | list | first | regex_replace('.*\\s+', '') }}"

- name: Check if SYS account is locked
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    set heading off feedback off
    select account_status from dba_users where username='SYS';
    exit
    EOF
  register: sys_locked

- name: Determine if DB is CDB
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    set heading off feedback off
    select cdb from v$database;
    exit
    EOF
  register: is_cdb

- set_fact:
    dg_user: "{{ transport_user_cdb if is_cdb.stdout.find('YES') != -1 else transport_user_non_cdb }}"

- name: Check if transport user exists
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    set heading off feedback off
    select count(*) from dba_users where username='{{ dg_user }}';
    exit
    EOF
  register: user_exists

- name: Create DG transport user with SYSOPER if missing
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    create user {{ dg_user }} identified by "{{ transport_user_password }}";
    grant sysoper to {{ dg_user }};
    alter user {{ dg_user }} identified by "{{ transport_user_password }}";
    exit
    EOF
  when: user_exists.stdout.find("0") != -1

- name: Set redo_transport_user in SPFILE
  shell: |
    . oraenv <<< {{ oracle_sid }}
    sqlplus -s / as sysdba <<EOF
    alter system set redo_transport_user='{{ dg_user }}';
    exit
    EOF

