---
# roles/manage_sys/tasks/main.yml
- name: Parse /etc/oratab and build SID to ORACLE_HOME mapping
  shell: |
    awk -F: '/^[^#]/ && NF >= 2 { print $1 ":" $2 }' /etc/oratab
  register: oratab_lines
  changed_when: false

- name: Build SID ‚Üí ORACLE_HOME pairs from /etc/oratab
  set_fact:
    sid_home_pairs: >-
      {{
        oratab_lines.stdout_lines
        | map('regex_replace', '^([^:]+):([^:]+):.*', '\\1|\\2')
        | map('split', '|')
        | list
      }}

- name: Set discovered DB list and sid ‚Üí home map
  set_fact:
    discovered_dbs: "{{ sid_home_pairs | map('first') | list }}"
    sid_home_map: "{{ dict(sid_home_pairs) }}"

- name: Debug discovered databases
  debug:
    var: discovered_dbs

- name: Debug ORACLE_HOME map
  debug:
    var: sid_home_map

- name: Loop over DBs and manage SYS/SYSTEM
  include_tasks: tasks/lock_accounts.yml
  loop: "{{ discovered_dbs }}"
  loop_control:
    loop_var: db_name
  vars:
    oracle_home: "{{ sid_home_map[db_name] }}"
  become: true
  become_user: "{{ oracle_user | default('oracle') }}"

# tasks/lock_accounts.yml

- name: Lock SYS if not already locked
  become: true
  become_user: oracle
  shell: |
    ORACLE_SID={{ db_name }}
    ORACLE_HOME=$(awk -F: -v sid="${ORACLE_SID}" '$1 == sid { print $2 }' /etc/oratab)
    PATH=$ORACLE_HOME/bin:$PATH
    LD_LIBRARY_PATH=$ORACLE_HOME/lib
    export ORACLE_SID ORACLE_HOME PATH LD_LIBRARY_PATH
    STATUS=$(echo "SELECT account_status FROM dba_users WHERE username='SYS';" | $ORACLE_HOME/bin/sqlplus -S / as sysdba | grep -c 'LOCKED')
    if [ "$STATUS" -eq 0 ]; then
      echo "ALTER USER SYS ACCOUNT LOCK;" | $ORACLE_HOME/bin/sqlplus -S / as sysdba
    fi
  changed_when: false

- name: Lock SYSTEM if not already locked
  shell: |
    ORACLE_SID={{ db_name }}
    ORACLE_HOME=$(awk -F: -v sid="${ORACLE_SID}" '$1 == sid { print $2 }' /etc/oratab)
    PATH=$ORACLE_HOME/bin:$PATH
    LD_LIBRARY_PATH=$ORACLE_HOME/lib
    export ORACLE_SID ORACLE_HOME PATH LD_LIBRARY_PATH
    echo "SELECT account_status FROM dba_users WHERE username='SYSTEM';" | sqlplus -S / as sysdba | grep -q 'LOCKED'
    if [ $? -ne 0 ]; then
      echo "ALTER USER SYSTEM ACCOUNT LOCK;" | sqlplus -S / as sysdba
    fi
  changed_when: false

- name: Get SHA256 checksum of password file
  stat:
    path: "{{ oracle_home }}/dbs/orapw{{ db_name }}"
    checksum_algorithm: sha256
  register: pw_stat
  tags: sync

- name: Set password file hash fact
  set_fact:
    "pwfile_{{ db_name }}": "{{ pw_stat.stat.checksum }}"
  tags: sync

# roles/manage_sys/tasks/detect_standbys.yml
- name: Get Data Guard standby services
  shell: |
    . ~/.bash_profile
    export ORACLE_SID={{ oracle_sid }}
    echo "SELECT destination, service FROM v\$archive_dest WHERE target='STANDBY' AND status='VALID';" | sqlplus -S / as sysdba
  register: dg_services_raw
  changed_when: false

- name: Extract standby service names
  set_fact:
    standby_services: >-
      {{ dg_services_raw.stdout_lines | select('match', '^\w+') | list }}

- name: Resolve standby hostnames from tnsnames.ora
  shell: |
    grep -A5 -i '{{ item }}' $ORACLE_HOME/network/admin/tnsnames.ora | grep HOST | head -1 | awk -F= '{ print $2 }' | tr -d ' )'
  loop: "{{ standby_services }}"
  register: resolved_standbys
  changed_when: false

- name: Set detected standby hosts
  set_fact:
    detected_standbys: "{{ resolved_standbys.results | map(attribute='stdout') | list }}"

# roles/manage_sys/tasks/sync.yml
- name: Sync password file to dynamically discovered standbys
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ hostvars[inventory_hostname]['detected_standbys'] | default([]) }}"
  when: "hostvars[inventory_hostname]['discovered_dbs'] is defined"
  block:
    - name: Copy password file for each DB
      loop: "{{ hostvars[inventory_hostname]['discovered_dbs'] }}"
      loop_control:
        loop_var: db_name
      copy:
        src: "{{ oracle_home }}/dbs/orapw{{ db_name }}"
        dest: "{{ oracle_home }}/dbs/orapw{{ db_name }}"
        owner: oracle
        group: dba
        mode: '0600'
        remote_src: false

# roles/manage_sys/tasks/manage_accounts.yml
- name: Manage DBA accounts on each Oracle database
  become: true
  vars_files:
    - "{{ playbook_dir }}/group_vars/dba_accounts/dba_accounts_list.yml"
  shell: |
    . /home/oracle/.bash_profile
    export ORACLE_SID={{ item.1 }}
    PASSWORD_FILE="{{ playbook_dir }}/group_vars/dba_accounts/DBA_{{ item.0.username | regex_replace('^DBA_', '') }}.yml"
    FILE_TIMESTAMP=$(date -r "$PASSWORD_FILE" '+%Y-%m-%d %H:%M:%S')
    LOG_FILE="/tmp/dba_account_actions_{{ item.0.username }}_{{ item.1 }}.log"
    SUMMARY_FILE="/tmp/dba_account_actions_summary.log"

    sqlplus -s / as sysdba <<EOF > \$LOG_FILE
    SET FEEDBACK OFF
    DECLARE
      user_exists NUMBER;
      pw_change_date DATE;
      action_taken VARCHAR2(100);
    BEGIN
      SELECT COUNT(*) INTO user_exists FROM dba_users WHERE username = UPPER('{{ item.0.username }}');

      IF user_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE USER {{ item.0.username }} IDENTIFIED BY "{{ lookup('vars', item.0.password_var) }}" ACCOUNT UNLOCK';
        action_taken := 'User created';
      ELSE
        BEGIN
          SELECT password_change_date INTO pw_change_date FROM dba_users WHERE username = UPPER('{{ item.0.username }}');
        EXCEPTION WHEN OTHERS THEN pw_change_date := TO_DATE('1900-01-01','YYYY-MM-DD');
        END;

        IF pw_change_date < TO_DATE('{{ FILE_TIMESTAMP }}', 'YYYY-MM-DD HH24:MI:SS') THEN
          EXECUTE IMMEDIATE 'ALTER USER {{ item.0.username }} IDENTIFIED BY "{{ lookup('vars', item.0.password_var) }}" ACCOUNT UNLOCK';
          action_taken := 'Password updated';
        ELSE
          action_taken := 'No action: password is current';
        END IF;
      END IF;

      DBMS_OUTPUT.PUT_LINE('Action: ' || action_taken);
    END;
    /
    GRANT {{ item.0.roles | join(', ') }} TO {{ item.0.username }};
    EXIT;
    EOF

    ACTION_RESULT=$(grep 'Action:' \$LOG_FILE | awk -F: '{print $2}' | xargs)
    echo "{{ item.0.username }} on {{ item.1 }}: \$ACTION_RESULT" >> \$SUMMARY_FILE
  loop: "{{ dba_accounts | product(databases) | list }}"
  loop_control:
    label: "Managing user {{ item.0.username }} on DB {{ item.1 }}"
  when: item.0.username is defined and item.0.password_var is defined and item.0.roles is defined
  vars:
    databases: "{{ lookup('pipe', 'awk -F: \'/^[^#]/ { print $1 }\' /etc/oratab') | split('\n') }}"

- name: Display consolidated DBA account actions summary
  become: true
  shell: cat /tmp/dba_account_actions_summary.log
  register: summary_output

- name: Show summary of DBA account management
  debug:
    msg: "{{ summary_output.stdout_lines }}"

# roles/manage_sys/meta/main.yml
---
depends: []

# site.yml
---
- name: Lock SYS/SYSTEM and compute password file hashes
  hosts: all
  become: yes
  roles:
    - role: manage_sys

- name: Detect standby hosts from Data Guard config
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: detect_standbys.yml

- name: Sync password files to detected standby hosts
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: yes
  roles:
    - role: manage_sys
      tasks_from: manage_accounts.yml

# Mangage_dba_pass.sh
#!/bin/bash

VAULT_DIR="group_vars/dba_accounts"
VAULT_PASSWORD_FILE="${VAULT_PASSWORD_FILE:-~/.vault_pass}"

# Prompt for DBA ID
read -rp "Enter your DBA ID (numeric only, e.g., 123): " DBA_ID

if ! [[ "$DBA_ID" =~ ^[0-9]+$ ]]; then
  echo "‚ùå Invalid ID. Must be numeric."
  exit 1
fi

VAULT_FILE="${VAULT_DIR}/DBA_${DBA_ID}.yml"
VAR_NAME="vault_dba_${DBA_ID}_password"

# Prompt for action
echo "Choose action:"
select ACTION in "Create New" "Update Existing" "Cancel"; do
  case $REPLY in
    1) break ;;
    2) break ;;
    3) echo "Cancelled."; exit 0 ;;
    *) echo "Invalid option. Choose 1 or 2." ;;
  esac
done

# Prompt for password securely
read -rsp "Enter password for DBA_${DBA_ID}: " password1; echo
read -rsp "Confirm password: " password2; echo

if [[ "$password1" != "$password2" ]]; then
  echo "‚ùå Passwords do not match."
  exit 1
fi

# Create vault directory if missing
mkdir -p "$VAULT_DIR"

# Generate temp file
TMPFILE=$(mktemp)
echo "${VAR_NAME}: \"${password1}\"" > "$TMPFILE"

# Encrypt into final vault file
if [[ "$ACTION" == "Create New" && -f "$VAULT_FILE" ]]; then
  echo "‚ö†Ô∏è Vault file already exists. Choose 'Update Existing' to change password."
  rm -f "$TMPFILE"
  exit 1
fi

ansible-vault encrypt "$TMPFILE" --output "$VAULT_FILE" --vault-password-file "$VAULT_PASSWORD_FILE"
rm -f "$TMPFILE"

echo "‚úÖ Vault file saved as $VAULT_FILE"
echo "üîê Only you (with your password) can edit it:"
echo "    ansible-vault edit $VAULT_FILE --vault-password-file $VAULT_PASSWORD_FILE"
