# site.yml
- name: Discover DBs
  hosts: all
  gather_facts: false
  become: true
  roles:
    - manage_sys

- name: Lock SYS/SYSTEM accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Lock accounts per DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

- name: Detect standby hosts
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Detect standby hostnames from Data Guard config
      include_role:
        name: manage_sys
        tasks_from: detect_standbys.yml

- name: Sync password files to standbys
  hosts: primary_db_hosts
  become: true
  gather_facts: false
  tasks:
    - name: Sync password files
      include_role:
        name: manage_sys
        tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Manage user accounts per DB
      include_role:
        name: manage_sys
        tasks_from: manage_accounts.yml


---
- name: Parse /etc/oratab (non-commented, valid lines)
  shell: "awk -F: '$0 !~ /^#/ && NF >= 2 { print $1\":\"$2 }' /etc/oratab"
  register: oratab_lines
  changed_when: false

- name: Create SID → ORACLE_HOME pairs
  set_fact:
    sid_home_pairs: "{{ oratab_lines.stdout_lines | map('split', ':') | list }}"

- name: Set discovered DB list
  set_fact:
    discovered_dbs: "{{ sid_home_pairs | map('first') | list }}"

- name: Set SID to ORACLE_HOME map
  set_fact:
    sid_home_map: "{{ dict(sid_home_pairs) }}"

- name: Debug discovered DBs
  debug:
    var: discovered_dbs

- name: Debug SID to ORACLE_HOME map
  debug:
    var: sid_home_map

# site.yml

- name: Lock SYS/SYSTEM accounts
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Include database discovery logic
      include_role:
        name: manage_sys

    - name: Lock SYS/SYSTEM for each DB
      include_role:
        name: manage_sys
        tasks_from: lock_accounts.yml
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      vars:
        oracle_home: "{{ sid_home_map[db_name] }}"

# lock_accounts.yml
---
- name: Lock SYS if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYS';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYS account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false

- name: Lock SYSTEM if not already locked
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    STATUS=$(echo "select account_status from dba_users where username='SYSTEM';" | sqlplus -s / as sysdba | grep -i 'LOCKED')
    if [ -z "$STATUS" ]; then
      echo "alter user SYSTEM account lock;" | sqlplus -s / as sysdba
    fi
  args:
    executable: /bin/bash
  changed_when: false


# roles/manage_sys/tasks/detect_standbys.yml
- name: Detect standby destinations from Data Guard
  become: true
  become_user: oracle
  shell: |
    export ORACLE_SID={{ item }}
    export ORACLE_HOME={{ sid_home_map[item] }}
    export PATH=$ORACLE_HOME/bin:$PATH
    sqlplus -s / as sysdba <<EOF
    SET FEEDBACK OFF HEADING OFF PAGESIZE 0
    SELECT destination FROM v$archive_dest
     WHERE target='STANDBY' AND status='VALID'
       AND destination IS NOT NULL;
    EXIT;
    EOF
  loop: "{{ discovered_dbs }}"
  register: dg_destinations
  changed_when: false

- name: Extract unique standby hostnames
  set_fact:
    detected_standbys: >-
      {{ dg_destinations.results | map(attribute='stdout_lines') | list | flatten | map('regex_replace', '^.*@', '') | unique }}

# roles/manage_sys/tasks/sync.yml
- name: Copy password files to each detected standby host
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ detected_standbys | default([]) }}"
  vars:
    standby_host: "{{ item }}"
  block:
    - name: Copy password file for each DB
      loop: "{{ discovered_dbs }}"
      loop_control:
        loop_var: db_name
      copy:
        src: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        dest: "{{ sid_home_map[db_name] }}/dbs/orapw{{ db_name }}"
        owner: oracle
        group: dba
        mode: '0600'
        remote_src: false


# roles/manage_sys/tasks/manage_accounts.yml
---
- name: Load DBA account list
  include_vars:
    file: "{{ playbook_dir }}/group_vars/dba_accounts/dba_accounts_list.yml"
    name: dba_accounts

- name: Detect if DB is multitenant (CDB)
  become: true
  become_user: oracle
  vars:
    oracle_home: "{{ sid_home_map[db_name] }}"
  shell: |
    export ORACLE_SID={{ db_name }}
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    echo "SET HEADING OFF FEEDBACK OFF; SELECT CDB FROM V\$DATABASE;" | sqlplus -S / as sysdba
  loop: "{{ discovered_dbs }}"
  loop_control:
    loop_var: db_name
  register: cdb_check_results
  changed_when: false

- name: Set CDB fact map per DB
  set_fact:
    is_cdb_map: >-
      {{
        dict(
          cdb_check_results.results | zip(
            cdb_check_results.results |
            map(attribute='stdout') |
            map('trim') |
            map('lower') |
            map('regex_search', '^yes') |
            map('bool')
          ) | map('list')
        )
      }}

- name: Ensure summary log file is reset
  become: true
  shell: rm -f /tmp/manage_accounts_summary.log

- name: Manage named DBA accounts
  become: true
  become_user: oracle
  vars:
    dba_pairs: "{{ dba_accounts.dba_accounts | product(discovered_dbs) | list }}"
  loop: "{{ dba_pairs }}"
  loop_control:
    label: "Managing {{ item.0.username }} on {{ item.1 }}"
  vars:
    account_name: "{{ 'C##' ~ item.0.username if is_cdb_map[item.1] | default(false) else item.0.username }}"
    container_clause: "{{ 'CONTAINER=ALL' if is_cdb_map[item.1] | default(false) else '' }}"
    password_file: "{{ playbook_dir }}/group_vars/dba_accounts/{{ item.0.username }}.yml"
    password_value: "{{ (lookup('file', password_file) | from_yaml)[item.0.password_var] }}"
  shell: |
    export ORACLE_SID={{ item.1 }}
    export ORACLE_HOME={{ sid_home_map[item.1] }}
    export PATH=$ORACLE_HOME/bin:$PATH

    FILE_TIMESTAMP=$(date -r "{{ password_file }}" '+%Y-%m-%d %H:%M:%S')
    LOG_FILE="/tmp/manage_{{ item.0.username }}_{{ item.1 }}.log"
    SUMMARY_FILE="/tmp/manage_accounts_summary.log"

    sqlplus -s / as sysdba > "$LOG_FILE" <<EOF
    SET HEADING OFF
    SET FEEDBACK OFF
    DECLARE
      user_exists NUMBER := 0;
      pw_change DATE := TO_DATE('1900-01-01','YYYY-MM-DD');
      action VARCHAR2(100);
    BEGIN
      BEGIN
        SELECT COUNT(*) INTO user_exists FROM dba_users WHERE username = UPPER('{{ account_name }}');
      EXCEPTION WHEN OTHERS THEN user_exists := 0;
      END;

      IF user_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE USER {{ account_name }} IDENTIFIED BY "{{ password_value }}" {{ container_clause }} ACCOUNT UNLOCK';
        action := 'User created';
      ELSE
        BEGIN
          SELECT password_change_date INTO pw_change FROM dba_users WHERE username = UPPER('{{ account_name }}');
        EXCEPTION WHEN OTHERS THEN NULL;
        END;

        IF pw_change < TO_DATE('{{ FILE_TIMESTAMP }}', 'YYYY-MM-DD HH24:MI:SS') THEN
          EXECUTE IMMEDIATE 'ALTER USER {{ account_name }} IDENTIFIED BY "{{ password_value }}" ACCOUNT UNLOCK';
          action := 'Password updated';
        ELSE
          action := 'No change needed';
        END IF;
      END IF;

      DBMS_OUTPUT.PUT_LINE('Action: ' || action);
    END;
    /
    GRANT {{ item.0.roles | map('quote') | join(', ') }} TO {{ account_name }} {{ container_clause }};
    EOF

    ACTION_LINE=$(grep 'Action:' "$LOG_FILE" | awk -F: '{print $2}' | xargs | tr -d '"')
    echo "{{ account_name }} on {{ item.1 }}: $ACTION_LINE" >> "$SUMMARY_FILE"
  args:
    executable: /bin/bash

- name: Display consolidated DBA account actions summary
  become: true
  shell: cat /tmp/manage_accounts_summary.log || echo "No actions performed."
  register: summary_output

- name: Show summary
  debug:
    msg: "{{ summary_output.stdout_lines }}"


# roles/manage_sys/meta/main.yml
---
dependencies: []

# site.yml
---
- name: Lock SYS/SYSTEM and compute password file hashes
  hosts: all
  become: yes
  roles:
    - role: manage_sys

- name: Detect standby hosts from Data Guard config
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: detect_standbys.yml

- name: Sync password files to detected standby hosts
  hosts: primary_db_hosts
  become: yes
  roles:
    - role: manage_sys
      tasks_from: sync.yml

- name: Manage named DBA accounts
  hosts: all
  become: yes
  roles:
    - role: manage_sys
      tasks_from: manage_accounts.yml

# Mangage_dba_pass.sh
#!/bin/bash

# === Secure Vault Creator for DBA Passwords ===

VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_dba"
VAULT_DIR="group_vars/dba_accounts"

read -rp "Enter your numeric DBA ID (e.g. 123): " DBA_ID

# Validate numeric ID
if [[ ! "$DBA_ID" =~ ^[0-9]+$ ]]; then
  echo "❌ Error: DBA ID must be numeric."
  exit 1
fi

DBA_USER="DBA_${DBA_ID}"
PASSWORD_VAR="dba_${DBA_ID}_password"
VAULT_FILE="${VAULT_DIR}/${DBA_USER}.yml"

mkdir -p "$VAULT_DIR"

read -rsp "Enter password for ${DBA_USER}: " PASSWORD
echo
read -rsp "Confirm password: " PASSWORD_CONFIRM
echo

if [[ "$PASSWORD" != "$PASSWORD_CONFIRM" ]]; then
  echo "❌ Error: Passwords do not match."
  exit 1
fi

# Create encrypted vault file
ansible-vault encrypt_string \
  --vault-id "${VAULT_ID}@${VAULT_PASS_FILE}" \
  "$PASSWORD" --name "$PASSWORD_VAR" > "$VAULT_FILE"

# Lock permissions to DBA user only
chown "$USER":"oracle" "$VAULT_FILE"
chmod 600 "$VAULT_FILE"

# Done
if [[ $? -eq 0 ]]; then
  echo "✅ Vault file created at: $VAULT_FILE"
  echo "🔐 Vault variable: $PASSWORD_VAR"
else
  echo "❌ Failed to create vault file"
  exit 1
fi

ansible localhost -m debug -a "msg={{ lookup('file', 'group_vars/dba_accounts/DBA_123.yml') | from_yaml }}"
--vault-id dba@/home/oracle/.vault_pass

mkdir -p group_vars/dba_accounts

# Step 1: Create a plain YAML file
cat <<EOF > group_vars/dba_accounts/DBA_123.yml
dba_password: mySecretPass123
EOF

# Step 2: Encrypt it with the correct vault ID
ansible-vault encrypt group_vars/dba_accounts/DBA_123.yml \
  --vault-id dba_vault@/home/oracle/.vault_pass


echo "test_var: secret" > test.yml
ansible-vault encrypt test.yml --vault-id dba_vault@/home/oracle/.vault_pass
ansible-vault view test.yml --vault-id dba_vault@/home/oracle/.vault_pass

mkdir -p group_vars/dba_accounts

# Step 1: Create a plain YAML file
cat <<EOF > group_vars/dba_accounts/DBA_123.yml
dba_password: mySecretPass123
EOF

# Step 2: Encrypt it with the correct vault ID
ansible-vault encrypt group_vars/dba_accounts/DBA_123.yml \
  --vault-id dba_vault@/home/oracle/.vault_pass
  
  
#!/bin/bash

# Configuration
VAULT_ID="dba_vault"
VAULT_PASS_FILE="/home/oracle/.vault_pass"
VAULT_DIR="group_vars/dba_accounts"
VAR_NAME="dba_password"

# Prompt for input
read -p "Enter your DBA numeric ID (e.g. 123): " DBA_ID

# Validate ID
if [[ ! $DBA_ID =~ ^[0-9]+$ ]]; then
  echo "❌ Invalid ID. Must be numeric."
  exit 1
fi

# Prompt for password (hidden input)
read -s -p "Enter password: " PASSWORD
echo
read -s -p "Confirm password: " CONFIRM
echo

if [[ "$PASSWORD" != "$CONFIRM" ]]; then
  echo "❌ Passwords do not match."
  exit 1
fi

# Prepare vault directory
mkdir -p "$VAULT_DIR"

# Generate temp YAML
TMPFILE=$(mktemp)
echo "$VAR_NAME: \"$PASSWORD\"" > "$TMPFILE"

# Encrypt with vault ID
VAULT_FILE="${VAULT_DIR}/DBA_${DBA_ID}.yml"
ansible-vault encrypt "$TMPFILE" --output "$VAULT_FILE" \
  --vault-id "$VAULT_ID@$VAULT_PASS_FILE"

# Cleanup
rm -f "$TMPFILE"

echo "✅ Vault file created: $VAULT_FILE"
