---
- name: Add host to known_hosts
  hosts: all
  tasks:
    - name: Add the host's fingerprint to known_hosts
      ansible.builtin.known_hosts:
        name: "{{ inventory_hostname }}"
        path: "~/.ssh/known_hosts"
        state: present
        key: "{{ lookup('pipe', 'ssh-keyscan -H ' + inventory_hostname) }}"
      become: yes  # Only if you need to execute as root

- name: Add SSH host to known_hosts using ssh-keyscan
  hosts: all
  tasks:
    - name: Add host to known_hosts with ssh-keyscan
      ansible.builtin.shell: |
        ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts
      args:
        creates: ~/.ssh/known_hosts  # Avoid adding if the file exists
      become: yes  # Only if you need to execute as root

---
# roles/oracle_connectivity/tasks/main.yml

- name: Set listener.ora path
  set_fact:
    tns_admin: "/u01/app/oracle/product/19.0.0/dbhome_1/network/admin"

- name: Read listener.ora file
  slurp:
    src: "{{ tns_admin }}/listener.ora"
  register: listener_ora_raw

- name: Parse listener.ora
  set_fact:
    listener_ora_lines: "{{ listener_ora_raw.content | b64decode | splitlines() }}"

- name: Extract listener name
  set_fact:
    listener_name: >-
      {{ listener_ora_lines | select('match', '^\s*\w+\s*=\s*\(') | map('regex_search', '^\s*(\w+)\s*=') | select('string') | list | first }}

- name: Extract listener port
  set_fact:
    listener_port: >-
      {{ (listener_ora_lines | select('search', 'PORT=\d+') | map('regex_search', 'PORT=(\d+)', '\1') | select('string') | list)[0] | default('1521') }}

- name: Check listener is active
  shell: |
    lsnrctl status {{ listener_name }} | grep -i "{{ oracle_sid }}"
  register: lsnrctl_check
  ignore_errors: true

- name: Check port is open (TCP check)
  wait_for:
    host: "localhost"
    port: "{{ listener_port | int }}"
    timeout: 5
  register: port_status

- name: Run tnsping
  shell: |
    tnsping localhost:{{ listener_port }}/{{ oracle_sid }}
  register: tnsping_check
  ignore_errors: true

- name: Try sqlplus connection (if creds provided)
  when: oracle_user is defined and oracle_pass is defined
  shell: |
    echo "select 'DB_OK' from dual;" | sqlplus -s {{ oracle_user }}/{{ oracle_pass }}@localhost:{{ listener_port }}/{{ oracle_sid }}
  register: sqlplus_check
  ignore_errors: true

- name: Report results
  debug:
    msg:
      - "Listener: {{ listener_name }}"
      - "Port: {{ listener_port }}"
      - "Listener Check: {{ 'OK' if lsnrctl_check.rc == 0 else 'FAILED' }}"
      - "Port Open: {{ port_status.elapsed }}s"
      - "TNSPing: {{ 'OK' if tnsping_check.rc == 0 else 'FAILED' }}"
      - >-
        {% if oracle_user is defined and oracle_pass is defined %}
        SQLPlus: {{ 'OK' if 'DB_OK' in sqlplus_check.stdout else 'FAILED' }}
        {% else %}
        SQLPlus: Skipped (no credentials provided)
        {% endif %}
        

---
# roles/oracle_health_validation/tasks/main.yml

- name: Gather current date
  ansible.builtin.command: date
  register: system_date

- name: Check mount points used by Oracle
  ansible.builtin.command: df -h
  register: df_output

- name: Check load average
  ansible.builtin.command: uptime
  register: uptime_output

- name: Check swap usage
  ansible.builtin.command: free -m
  register: mem_output

- name: Check hugepages configuration
  ansible.builtin.command: cat /proc/meminfo | grep Huge
  register: hugepages_output

- name: Check for Oracle processes
  ansible.builtin.shell: ps -ef | grep ora_ | grep -v grep
  register: ora_processes

- name: Check PMON/SMON/Listener presence
  ansible.builtin.shell: |
    ps -ef | grep -E 'pmon|smon|tnslsnr' | grep -v grep
  register: essential_processes

- name: Validate listener port open
  ansible.builtin.wait_for:
    host: localhost
    port: "{{ listener_port | default(1521) }}"
    timeout: 3
  register: listener_port_status
  ignore_errors: true

- name: Check alert log for ORA-/TNS- errors (last 100 lines)
  ansible.builtin.shell: |
    tail -100 {{ oracle_alert_log | default('/u01/app/oracle/diag/rdbms/' + oracle_sid + '/' + oracle_sid + '/trace/alert_' + oracle_sid + '.log') }} | grep -E 'ORA-|TNS-'
  register: alert_log_errors
  ignore_errors: true

- name: Optional: Query v$instance if credentials are available
  ansible.builtin.shell: |
    echo "select status from v\$instance;" | sqlplus -s {{ oracle_user }}/{{ oracle_pass }}@localhost:{{ listener_port }}/{{ oracle_sid }}
  register: db_status_check
  when: oracle_user is defined and oracle_pass is defined
  ignore_errors: true

- name: Report summary of health check
  ansible.builtin.debug:
    msg:
      - "System Date: {{ system_date.stdout }}"
      - "Filesystem: {{ df_output.stdout_lines | select('search', '/u01|/u02') | list }}"
      - "Load Average: {{ uptime_output.stdout }}"
      - "Swap Info: {{ mem_output.stdout_lines }}"
      - "HugePages Info: {{ hugepages_output.stdout_lines }}"
      - "Oracle Processes Running: {{ ora_processes.stdout_lines | length }}"
      - "Essential Processes: {{ essential_processes.stdout_lines }}"
      - "Listener Port Open: {{ 'Yes' if listener_port_status.state == 'started' else 'No' }}"
      - >-
        {% if alert_log_errors.stdout_lines is defined and alert_log_errors.stdout_lines | length > 0 %}
        ALERT Log Errors:
        {{ alert_log_errors.stdout_lines }}
        {% else %}
        ALERT Log Errors: None
        {% endif %}
      - >-
        {% if db_status_check is defined %}
        DB Status: {{ db_status_check.stdout_lines }}
        {% else %}
        DB Status: Skipped (no creds provided)
        {% endif %}

