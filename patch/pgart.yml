---
# Playbook: Update PostgreSQL packages from Artifactory
# Description: Downloads PostgreSQL RPMs from Artifactory if not installed
#              Uses dnf module for installation and group_vars/all for package inventory

- name: PostgreSQL Update from Artifactory
  hosts: postgres_servers
  become: true

  tasks:
    - name: Set OS facts
      ansible.builtin.set_fact:
        os_key: "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

    - name: Debug OS key
      ansible.builtin.debug:
        msg: "Using OS key: {{ os_key }}"

    - name: Set target PostgreSQL version
      ansible.builtin.set_fact:
        postgres_target_version: "{{ postgres_target_version | default('15.12') }}"

    - name: Verify package inventory exists for this OS
      ansible.builtin.assert:
        that: "package_inventory[os_key] is defined"
        fail_msg: "No package inventory found for {{ os_key }}"

    - name: Verify package inventory exists for target PostgreSQL version
      ansible.builtin.assert:
        that: "package_inventory[os_key][postgres_target_version] is defined"
        fail_msg: "No package inventory found for PostgreSQL version {{ postgres_target_version }} on {{ os_key }}"

    - name: Create download directory
      ansible.builtin.file:
        path: "{{ download_dir }}"
        state: directory
        mode: '0755'

    - name: Get package info for all PostgreSQL packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Extract package base names without extension
      ansible.builtin.set_fact:
        package_base_names: "{{ package_inventory[os_key][postgres_target_version] | map('regex_replace', '\\.rpm$', '') | list }}"

    - name: Debug package base names
      ansible.builtin.debug:
        var: package_base_names

    - name: Check if packages are already installed with correct version
      ansible.builtin.set_fact:
        pkg_needs_install: "{{ pkg_needs_install | default([]) + [item] }}"
      loop: "{{ package_inventory[os_key][postgres_target_version] }}"
      when: >
        item | regex_replace('-[^-]+-[^-]+\\.rpm$', '') not in ansible_facts.packages or 
        postgres_target_version not in (ansible_facts.packages[item | regex_replace('-[^-]+-[^-]+\\.rpm$', '')] | map(attribute='version') | list)

    - name: Debug packages needing install
      ansible.builtin.debug:
        var: pkg_needs_install

    - name: Download PostgreSQL packages from Artifactory
      ansible.builtin.get_url:
        url: "{{ artifactory_base_url }}/{{ item }}"
        dest: "{{ download_dir }}/{{ item }}"
        mode: '0644'
      loop: "{{ pkg_needs_install | default([]) }}"
      register: download_result

    - name: Install PostgreSQL packages using dnf module
      ansible.builtin.dnf:
        name: "{{ download_dir }}/{{ item }}"
        state: present
        disable_gpg_check: no  # Set to yes if needed
      loop: "{{ pkg_needs_install | default([]) }}"
      when: pkg_needs_install is defined and pkg_needs_install | length > 0
      register: installation_result

    - name: Show installation results
      ansible.builtin.debug:
        msg: "Installed packages: {{ installation_result.results | map(attribute='name') | list }}"
      when: installation_result.changed | default(false)

    - name: Show no changes needed message
      ansible.builtin.debug:
        msg: "All packages already at the correct version. No changes made."
      when: pkg_needs_install is not defined or pkg_needs_install | length == 0

    - name: Clean up downloaded RPM files
      ansible.builtin.file:
        path: "{{ download_dir }}"
        state: absent
      when: pkg_needs_install is defined and pkg_needs_install | length > 0