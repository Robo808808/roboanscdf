- name: Get mount point of oracle_base
  shell: |
    df --output=target "{{ oracle_base }}" | tail -1
  register: mount_point
  changed_when: false

- name: Set fact for mount point
  set_fact:
    oracle_mount_point: "{{ mount_point.stdout }}"

- name: Find all directories from mount point to oracle_base
  shell: |
    base="{{ oracle_base }}"
    mount="{{ oracle_mount_point }}"
    dir="$base"
    while [ "$dir" != "$mount" ]; do
      echo "$dir"
      dir=$(dirname "$dir")
    done
    echo "$mount"
  register: dir_chain
  changed_when: false

- name: Check ownership of all dirs from mount point to oracle_base
  shell: |
    for d in {{ dir_chain.stdout_lines | reverse | join(' ') }}; do
      owner=$(stat -c %U "$d")
      if [ "$owner" != "oradinfa" ]; then
        echo "$d is owned by $owner"
        exit 1
      fi
    done
  register: ownership_check
  changed_when: false
  failed_when: ownership_check.rc != 0

- name: Print ownership check result
  debug:
    var: ownership_check.stdout_lines


- name: Find process by name (case-insensitive)
  shell: |
    ps -eo user:20,comm,args | awk 'BEGIN{IGNORECASE=1} $0 ~ /{{ process_name }}/ { print $1, $2, $3 }'
  register: process_info
  changed_when: false

- name: Fail if process not found
  fail:
    msg: "No process matching '{{ process_name }}' found"
  when: process_info.stdout_lines | length == 0

- name: Debug matched process lines
  debug:
    var: process_info.stdout_lines

- name: Check process owner
  shell: |
    ps -eo user:20,comm,args | awk 'BEGIN{IGNORECASE=1} $0 ~ /{{ process_name }}/ { print $1 }' | uniq
  register: process_owner
  changed_when: false

- name: Fail if process is not owned by expected user
  fail:
    msg: "Process '{{ process_name }}' is not owned by '{{ expected_owner }}'. Found: {{ process_owner.stdout_lines }}"
  when: process_owner.stdout_lines | difference([expected_owner]) | length > 0
