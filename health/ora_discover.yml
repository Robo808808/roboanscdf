---
- name: Oracle Services Discovery Playbook
  hosts: oracle_servers
  become: yes
  become_user: oracle
  gather_facts: yes
  vars:
    oracle_output_dir: "/tmp/oracle_discovery"
    report_destination: "/var/www/html/oracle_report.html"
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.time }}"
    oratab_path: "/etc/oratab"

  tasks:
    - name: Create output directory
      file:
        path: "{{ oracle_output_dir }}"
        state: directory
        mode: '0755'
      become: yes
      become_user: root

    - name: Check if oratab file exists
      stat:
        path: "{{ oratab_path }}"
      register: oratab_file

    - name: Fail if oratab file doesn't exist
      fail:
        msg: "Oracle oratab file not found at {{ oratab_path }}"
      when: not oratab_file.stat.exists

    - name: Parse oratab file
      shell: grep -v "^#" {{ oratab_path }} | grep -v "^$" | awk -F: '{print $1":"$2}'
      register: oratab_entries
      changed_when: false

    - name: Create Python script for Oracle DB checks
      copy:
        dest: "{{ oracle_output_dir }}/check_oracle_db.py"
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          import sys
          import subprocess
          import json
          import cx_Oracle
          import time
          import os
          from datetime import datetime

          def get_db_role(sid, oracle_home):
              os.environ["ORACLE_HOME"] = oracle_home
              os.environ["ORACLE_SID"] = sid
              
              try:
                  # Connect as SYSDBA
                  conn = cx_Oracle.connect('/ as sysdba')
                  cursor = conn.cursor()
                  
                  # Check database role
                  cursor.execute("SELECT DATABASE_ROLE FROM V$DATABASE")
                  role = cursor.fetchone()[0]
                  
                  # Check if database is open
                  cursor.execute("SELECT OPEN_MODE FROM V$DATABASE")
                  open_mode = cursor.fetchone()[0]
                  
                  result = {
                      "sid": sid,
                      "oracle_home": oracle_home,
                      "role": role,
                      "open_mode": open_mode,
                      "status": "UP",
                      "error": None
                  }
                  
                  # If it's a standby database, check MRP status and lag
                  if role == "PHYSICAL STANDBY":
                      try:
                          # Check if MRP is running
                          cursor.execute("SELECT COUNT(*) FROM V$MANAGED_STANDBY WHERE PROCESS LIKE 'MRP%'")
                          mrp_count = cursor.fetchone()[0]
                          result["mrp_running"] = (mrp_count > 0)
                          
                          # Check apply lag
                          cursor.execute("""
                              SELECT NVL(ROUND((SYSDATE - MAX(COMPLETION_TIME)) * 24 * 60, 2), -1) AS lag_minutes
                              FROM V$ARCHIVED_LOG WHERE APPLIED = 'YES' AND COMPLETION_TIME IS NOT NULL
                          """)
                          lag_minutes = cursor.fetchone()[0]
                          result["apply_lag_minutes"] = lag_minutes
                      except Exception as e:
                          result["mrp_error"] = str(e)
                  
                  # For primary, check active connections
                  elif role == "PRIMARY":
                      try:
                          cursor.execute("SELECT COUNT(*) FROM V$SESSION WHERE TYPE = 'USER'")
                          result["active_connections"] = cursor.fetchone()[0]
                      except Exception as e:
                          result["connection_error"] = str(e)
                  
                  cursor.close()
                  conn.close()
                  return result
                  
              except cx_Oracle.DatabaseError as e:
                  error, = e.args
                  return {
                      "sid": sid,
                      "oracle_home": oracle_home,
                      "status": "DOWN",
                      "error": str(error)
                  }
                  
          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: check_oracle_db.py <SID> <ORACLE_HOME>")
                  sys.exit(1)
                  
              sid = sys.argv[1]
              oracle_home = sys.argv[2]
              
              result = get_db_role(sid, oracle_home)
              print(json.dumps(result))
      become: yes

    - name: Create Python script for listener checks
      copy:
        dest: "{{ oracle_output_dir }}/check_oracle_listener.py"
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          import sys
          import subprocess
          import json
          import os
          import re

          def parse_listener_ora(oracle_home):
              listener_file = os.path.join(oracle_home, "network", "admin", "listener.ora")
              listeners = []
              
              try:
                  with open(listener_file, 'r') as f:
                      content = f.read()
                      
                  # Extract listener names
                  listener_sections = re.findall(r'(^\s*([A-Za-z0-9_]+)\s*=\s*\()', content, re.MULTILINE)
                  
                  for match in listener_sections:
                      listeners.append(match[1])
                      
                  return listeners
              except Exception as e:
                  return []

          def check_listener(listener_name, oracle_home):
              os.environ["ORACLE_HOME"] = oracle_home
              os.environ["TNS_ADMIN"] = os.path.join(oracle_home, "network", "admin")
              
              result = {
                  "listener_name": listener_name,
                  "oracle_home": oracle_home,
                  "status": "DOWN",
                  "error": None,
                  "services": []
              }
              
              try:
                  # Run lsnrctl status to check listener status
                  cmd = [os.path.join(oracle_home, "bin", "lsnrctl"), "status", listener_name]
                  process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
                  stdout, stderr = process.communicate()
                  
                  if process.returncode != 0:
                      result["error"] = stderr if stderr else "Listener is down"
                      return result
                  
                  result["status"] = "UP"
                  
                  # Parse services
                  services_section = re.search(r'Services Summary.*?The command completed successfully', stdout, re.DOTALL)
                  if services_section:
                      services_text = services_section.group(0)
                      service_lines = re.findall(r'"([^"]+)"', services_text)
                      result["services"] = service_lines
                  
                  return result
                  
              except Exception as e:
                  result["error"] = str(e)
                  return result

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: check_oracle_listener.py <LISTENER_NAME> <ORACLE_HOME>")
                  sys.exit(1)
                  
              listener_name = sys.argv[1]
              oracle_home = sys.argv[2]
              
              result = check_listener(listener_name, oracle_home)
              print(json.dumps(result))
      become: yes

    - name: Create Python script to discover listeners
      copy:
        dest: "{{ oracle_output_dir }}/discover_listeners.py"
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          import sys
          import os
          import re
          import json

          def discover_listeners(oracle_home):
              listener_file = os.path.join(oracle_home, "network", "admin", "listener.ora")
              listeners = []
              
              try:
                  with open(listener_file, 'r') as f:
                      content = f.read()
                      
                  # Extract listener names
                  listener_sections = re.findall(r'(^\s*([A-Za-z0-9_]+)\s*=\s*\()', content, re.MULTILINE)
                  
                  for match in listener_sections:
                      listeners.append(match[1])
                      
                  return {
                      "oracle_home": oracle_home,
                      "listeners": listeners,
                      "listener_file": listener_file,
                      "status": "SUCCESS"
                  }
              except Exception as e:
                  return {
                      "oracle_home": oracle_home,
                      "listeners": [],
                      "status": "ERROR",
                      "error": str(e)
                  }

          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: discover_listeners.py <ORACLE_HOME>")
                  sys.exit(1)
                  
              oracle_home = sys.argv[1]
              result = discover_listeners(oracle_home)
              print(json.dumps(result))
      become: yes

    - name: Process each Oracle SID from oratab
      include_tasks: check_sid.yml
      loop: "{{ oratab_entries.stdout_lines }}"
      loop_control:
        loop_var: sid_entry

    - name: Create HTML report from template
      template:
        src: oracle_report.html.j2
        dest: "{{ report_destination }}"
      become: yes
      become_user: root

    - name: Set permissions on HTML report
      file:
        path: "{{ report_destination }}"
        mode: '0644'
      become: yes
      become_user: root

    - name: Show report location
      debug:
        msg: "Oracle services discovery report has been generated at {{ report_destination }}"