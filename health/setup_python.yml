---
- name: Setup Oracle Python Environment for User
  hosts: oracle_servers
  remote_user: oracle
  become: no  # Not using root

  vars:
    # Artifactory settings
    artifactory_url: "https://your-artifactory-instance/artifactory"
    artifactory_repo: "python-local"
    artifactory_user: "{{ lookup('env', 'ARTIFACTORY_USER') }}"
    artifactory_password: "{{ lookup('env', 'ARTIFACTORY_PASSWORD') }}"

    # Environment settings
    venv_dir: "{{ ansible_env.HOME }}/oracle_venv"

    # Package options - uncomment the approach you want to use
    use_cx_oracle: true  # Set to false if you want to use the Python 3.8+ approach instead
    cx_oracle_version: "8.3.0"  # Last version that supports Python 3.6

  tasks:
    # Check Python version
    - name: Get Python version
      command: python3 -c "import sys; print(sys.version_info.major, sys.version_info.minor)"
      register: python_version
      changed_when: false

    - name: Set Python version facts
      set_fact:
        python_major: "{{ python_version.stdout.split()[0] }}"
        python_minor: "{{ python_version.stdout.split()[1] }}"

    - name: Show current Python version
      debug:
        msg: "Current Python version: {{ python_major }}.{{ python_minor }}"

    # Approach 1: Use cx_Oracle with existing Python 3.6
    - name: Setup cx_Oracle with existing Python 3.6
      when: use_cx_oracle | bool
      block:
        - name: Create virtual environment with existing Python
          command: python3 -m venv {{ venv_dir }}
          args:
            creates: "{{ venv_dir }}/bin/activate"

        - name: Create pip.conf with Artifactory credentials
          copy:
            dest: "{{ venv_dir }}/pip.conf"
            content: |
              [global]
              index-url = https://{{ artifactory_user }}:{{ artifactory_password }}@{{ artifactory_url.replace('https://', '') }}/{{ artifactory_repo }}/simple
              trusted-host = {{ artifactory_url.replace('https://', '').split('/')[0] }}
            mode: '0600'

        - name: Install cx_Oracle from Artifactory
          pip:
            name: cx_Oracle=={{ cx_oracle_version }}
            virtualenv: "{{ venv_dir }}"
            extra_args: "--no-cache-dir"

        - name: Create Oracle environment activation script
          copy:
            dest: "{{ ansible_env.HOME }}/activate_oracle_env.sh"
            content: |
              #!/bin/bash
              source {{ venv_dir }}/bin/activate
              
              # Set Oracle environment variables if needed
              # export ORACLE_HOME=/path/to/oracle
              # export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
              
              echo "Oracle Python environment activated with cx_Oracle {{ cx_oracle_version }}."
              echo "Compatible with your Python {{ python_major }}.{{ python_minor }}."
            mode: '0755'

    # Approach 2: Install Python 3.8+ from Artifactory
    - name: Setup newer Python with oracledb
      when: not use_cx_oracle | bool
      block:
        - name: Create directory for new Python installation
          file:
            path: "{{ ansible_env.HOME }}/python3.8"
            state: directory
            mode: '0755'

        - name: Download Python 3.8+ from Artifactory
          get_url:
            url: "{{ artifactory_url }}/{{ artifactory_repo }}/python-3.8.16-linux-x86_64.tar.gz"
            dest: "{{ ansible_env.HOME }}/python3.8.tar.gz"
            username: "{{ artifactory_user }}"
            password: "{{ artifactory_password }}"
            mode: '0644'
            force: no

        - name: Extract Python package
          unarchive:
            src: "{{ ansible_env.HOME }}/python3.8.tar.gz"
            dest: "{{ ansible_env.HOME }}/python3.8"
            remote_src: yes
            creates: "{{ ansible_env.HOME }}/python3.8/bin/python3"

        - name: Create virtual environment with Python 3.8
          command: "{{ ansible_env.HOME }}/python3.8/bin/python3 -m venv {{ venv_dir }}"
          args:
            creates: "{{ venv_dir }}/bin/activate"

        - name: Create pip.conf with Artifactory credentials
          copy:
            dest: "{{ venv_dir }}/pip.conf"
            content: |
              [global]
              index-url = https://{{ artifactory_user }}:{{ artifactory_password }}@{{ artifactory_url.replace('https://', '') }}/{{ artifactory_repo }}/simple
              trusted-host = {{ artifactory_url.replace('https://', '').split('/')[0] }}
            mode: '0600'

        - name: Install oracledb from Artifactory
          pip:
            name: oracledb
            virtualenv: "{{ venv_dir }}"
            extra_args: "--no-cache-dir"

        - name: Create Oracle environment activation script
          copy:
            dest: "{{ ansible_env.HOME }}/activate_oracle_env.sh"
            content: |
              #!/bin/bash
              source {{ venv_dir }}/bin/activate
              
              # Set Oracle environment variables if needed
              # export ORACLE_HOME=/path/to/oracle
              # export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
              
              echo "Oracle Python environment activated with oracledb using Python 3.8+."
            mode: '0755'

    # Common configuration
    - name: Add environment shortcut to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias activate_oracle="source {{ ansible_env.HOME }}/activate_oracle_env.sh"'
        state: present