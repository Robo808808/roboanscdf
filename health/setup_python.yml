---
- name: Setup Python Environment for Oracle User (Offline Method)
  hosts: oracle_servers
  remote_user: oracle
  become: no  # Not using root for most tasks

  vars:
    python_version: "3.10.12"
    python_dir: "{{ ansible_env.HOME }}/python"
    venv_dir: "{{ ansible_env.HOME }}/oracle_venv"
    local_python_tarball: "files/Python-{{ python_version }}.tar.xz"
    local_oracledb_wheel: "files/python-oracledb-1.4.1-py3-none-any.whl"  # Adjust version as needed
    # Add other wheel files as needed

  tasks:
    # Step 1: Install build dependencies (this is the only task that needs root)
    - name: Install Python build dependencies
      become: yes
      package:
        name:
          - make
          - gcc
          - zlib1g-dev
          - libssl-dev
          - libffi-dev
          - libreadline-dev
          - libsqlite3-dev
        state: present

    # Step 2: Create directories for Python installation
    - name: Create Python directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ python_dir }}"
        - "{{ python_dir }}/build"
        - "{{ ansible_env.HOME }}/wheels"

    # Step 3: Transfer Python source tarball and wheel files
    - name: Copy Python tarball to remote server
      copy:
        src: "{{ local_python_tarball }}"
        dest: "{{ python_dir }}/Python-{{ python_version }}.tar.xz"
        mode: '0644'

    - name: Copy oracledb wheel file to remote server
      copy:
        src: "{{ local_oracledb_wheel }}"
        dest: "{{ ansible_env.HOME }}/wheels/"
        mode: '0644'

    # Step 4: Extract and compile Python
    - name: Check if Python is already installed
      stat:
        path: "{{ python_dir }}/bin/python3"
      register: python_binary

    - name: Extract Python tarball
      unarchive:
        src: "{{ python_dir }}/Python-{{ python_version }}.tar.xz"
        dest: "{{ python_dir }}/build"
        remote_src: yes
      when: not python_binary.stat.exists

    - name: Configure and install Python
      shell: |
        cd {{ python_dir }}/build/Python-{{ python_version }} && \
        ./configure --prefix={{ python_dir }} --enable-optimizations && \
        make -j4 && \
        make install
      args:
        creates: "{{ python_dir }}/bin/python3"
      when: not python_binary.stat.exists

    # Step 5: Setup virtual environment and install packages
    - name: Check if virtual environment exists
      stat:
        path: "{{ venv_dir }}/bin/activate"
      register: venv_exists

    - name: Create virtual environment
      shell: "{{ python_dir }}/bin/python3 -m venv {{ venv_dir }}"
      when: not venv_exists.stat.exists

    - name: Install oracledb from wheel
      shell: |
        source {{ venv_dir }}/bin/activate
        pip install {{ ansible_env.HOME }}/wheels/python-oracledb-*.whl
      args:
        executable: /bin/bash

    # Step 6: Setup environment shortcuts
    - name: Create activation script
      copy:
        dest: "{{ ansible_env.HOME }}/activate_oracle_env.sh"
        content: |
          #!/bin/bash
          source {{ venv_dir }}/bin/activate
          echo "Oracle Python environment activated. You can now use the oracledb package."
        mode: '0755'

    - name: Add environment shortcut to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias activate_oracle="source {{ ansible_env.HOME }}/activate_oracle_env.sh"'
        state: present

# Instructions for preparation:
# Before running this playbook:
# 1. Download Python source: https://www.python.org/ftp/python/3.10.12/Python-3.10.12.tar.xz
# 2. Download required wheel files locally:
#    - pip wheel oracledb -w ./files/
#    - Also download any dependency wheels
# 3. Create a 'files' directory alongside this playbook and place the downloads there