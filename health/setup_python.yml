---
- name: Setup Python Environment for Oracle User from Source
  hosts: oracle_servers
  remote_user: oracle
  become: no  # Not using root for most tasks

  vars:
    # Python version to install
    python_version: "3.10.12"
    python_source_url: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tar.xz"

    # Installation directories
    build_dir: "{{ ansible_env.HOME }}/build"
    python_dir: "{{ ansible_env.HOME }}/python{{ python_version }}"
    venv_dir: "{{ ansible_env.HOME }}/oracle_venv"

    # Choose package to install
    use_cx_oracle: false  # Set to true to use cx_Oracle with Python 3.6 instead

    # Artifactory settings (if needed)
    artifactory_url: "https://your-artifactory-instance/artifactory"
    artifactory_repo: "python-local"
    artifactory_user: "{{ lookup('env', 'ARTIFACTORY_USER') | default('') }}"
    artifactory_password: "{{ lookup('env', 'ARTIFACTORY_PASSWORD') | default('') }}"

  tasks:
    # Step 1: Create build directories
    - name: Create build directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ build_dir }}"
        - "{{ python_dir }}"

    # Step 2: Check if Python is already built
    - name: Check if custom Python is already installed
      stat:
        path: "{{ python_dir }}/bin/python3"
      register: custom_python

    # Step 3: Install Python from source
    - name: Download Python source
      get_url:
        url: "{{ python_source_url }}"
        dest: "{{ build_dir }}/Python-{{ python_version }}.tar.xz"
        mode: '0644'
      when: not custom_python.stat.exists

    - name: Extract Python source
      unarchive:
        src: "{{ build_dir }}/Python-{{ python_version }}.tar.xz"
        dest: "{{ build_dir }}"
        remote_src: yes
      when: not custom_python.stat.exists

    - name: Install build dependencies (requires temporary root)
      become: yes
      package:
        name:
          - make
          - gcc
          - zlib1g-dev
          - libssl-dev
          - libffi-dev
          - libsqlite3-dev
          - libreadline-dev
        state: present
      when: not custom_python.stat.exists

    - name: Configure Python build
      command: ./configure --prefix={{ python_dir }} --enable-optimizations
      args:
        chdir: "{{ build_dir }}/Python-{{ python_version }}"
        creates: "{{ build_dir }}/Python-{{ python_version }}/Makefile"
      when: not custom_python.stat.exists

    - name: Compile and install Python
      shell: make -j$(nproc) && make install
      args:
        chdir: "{{ build_dir }}/Python-{{ python_version }}"
        creates: "{{ python_dir }}/bin/python3"
      when: not custom_python.stat.exists

    # Step 4: Create virtual environment
    - name: Check if virtual environment exists
      stat:
        path: "{{ venv_dir }}/bin/activate"
      register: venv_exists

    - name: Create virtual environment with custom Python
      command: "{{ python_dir }}/bin/python3 -m venv {{ venv_dir }}"
      when: not venv_exists.stat.exists and not use_cx_oracle

    # Alternative: Use system Python 3.6 with cx_Oracle
    - name: Get system Python version
      command: python3 -c "import sys; print('{}.{}'.format(sys.version_info.major, sys.version_info.minor))"
      register: sys_python_version
      changed_when: false
      when: use_cx_oracle

    - name: Create virtual environment with system Python
      command: python3 -m venv {{ venv_dir }}
      when: use_cx_oracle and not venv_exists.stat.exists

    # Step 5: Configure pip with Artifactory (if credentials provided)
    - name: Check if Artifactory credentials are provided
      set_fact:
        use_artifactory: "{{ artifactory_user != '' and artifactory_password != '' }}"

    - name: Create pip.conf with Artifactory configuration
      copy:
        dest: "{{ venv_dir }}/pip.conf"
        content: |
          [global]
          index-url = https://{{ artifactory_user }}:{{ artifactory_password }}@{{ artifactory_url.replace('https://', '') }}/{{ artifactory_repo }}/simple
          trusted-host = {{ artifactory_url.replace('https://', '').split('/')[0] }}
        mode: '0600'
      when: use_artifactory

    # Step 6: Install Oracle packages
    - name: Install oracledb package
      pip:
        name: oracledb
        virtualenv: "{{ venv_dir }}"
      when: not use_cx_oracle

    - name: Install cx_Oracle package
      pip:
        name: cx_Oracle<8.4.0  # Last versions that support Python 3.6
        virtualenv: "{{ venv_dir }}"
      when: use_cx_oracle

    # Step 7: Create activation script
    - name: Create Oracle environment activation script
      copy:
        dest: "{{ ansible_env.HOME }}/activate_oracle_env.sh"
        content: |
          #!/bin/bash
          source {{ venv_dir }}/bin/activate
          
          # Set Oracle environment variables if needed
          # export ORACLE_HOME=/path/to/oracle
          # export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
          
          {% if not use_cx_oracle %}
          echo "Oracle Python environment activated with oracledb on Python {{ python_version }}."
          {% else %}
          echo "Oracle Python environment activated with cx_Oracle on system Python {{ sys_python_version.stdout }}."
          {% endif %}
        mode: '0755'

    - name: Add environment shortcut to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias activate_oracle="source {{ ansible_env.HOME }}/activate_oracle_env.sh"'
        state: present

    # Optional: Clean up build files to save space
    - name: Clean up build files (optional)
      file:
        path: "{{ build_dir }}/Python-{{ python_version }}"
        state: absent
      when: custom_python.stat.exists  # Only clean up if Python is already built