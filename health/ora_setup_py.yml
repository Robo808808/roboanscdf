---
- name: Setup Python with Native SQLPlus Integration
  hosts: oracle_servers
  remote_user: oracle
  become: no  # Not using root

  vars:
    oracle_home: "/opt/oracle/product/19c/dbhome_1"  # Adjust to your Oracle installation path
    oracle_sid: "ORCL"                               # Adjust to your Oracle SID
    scripts_dir: "{{ ansible_env.HOME }}/oracle_scripts"
    venv_dir: "{{ ansible_env.HOME }}/oracle_venv"

  tasks:
    # Step 1: Check Oracle environment
    - name: Check if sqlplus is available
      shell: which sqlplus
      register: sqlplus_check
      failed_when: false
      changed_when: false

    - name: Fail if Oracle environment is not available
      fail:
        msg: "SQLPlus not found in PATH. Ensure Oracle client is installed and configured."
      when: sqlplus_check.rc != 0

    # Step 2: Create directories
    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ scripts_dir }}"
        - "{{ scripts_dir }}/python"

    # Step 3: Create virtual environment with existing Python
    - name: Check if virtual environment exists
      stat:
        path: "{{ venv_dir }}/bin/activate"
      register: venv_exists

    - name: Create virtual environment with system Python
      command: python3 -m venv {{ venv_dir }}
      when: not venv_exists.stat.exists

    # Step 4: Create Oracle environment setup script
    - name: Create Oracle environment setup script
      copy:
        dest: "{{ scripts_dir }}/set_oracle_env.sh"
        content: |
          #!/bin/bash
          # Oracle environment setup script
          
          # Customize these variables for your environment
          export ORACLE_HOME={{ oracle_home }}
          export ORACLE_SID={{ oracle_sid }}
          export PATH=$ORACLE_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
          
          # Additional environment variables if needed
          # export TNS_ADMIN=$ORACLE_HOME/network/admin
          
          echo "Oracle environment set up for $ORACLE_SID"
        mode: '0755'

    # Step 5: Create Python utility class for Oracle operations
    - name: Create Python SQLPlus wrapper class
      copy:
        dest: "{{ scripts_dir }}/python/oracle_utils.py"
        content: |
          #!/usr/bin/env python3
          """
          Oracle Utilities - SQLPlus wrapper for Python
          
          This module provides a Python interface to Oracle via SQLPlus command-line.
          It doesn't require cx_Oracle or oracledb packages, just standard Python and SQLPlus.
          """
          
          import os
          import subprocess
          import tempfile
          import csv
          import json
          
          class OracleRunner:
              """Execute Oracle SQLPlus commands from Python"""
              
              def __init__(self, oracle_home=None, oracle_sid=None, use_sysdba=False):
                  """Initialize with Oracle environment details"""
                  self.oracle_home = oracle_home or os.environ.get('ORACLE_HOME')
                  self.oracle_sid = oracle_sid or os.environ.get('ORACLE_SID')
                  self.use_sysdba = use_sysdba
                  
                  # Validate Oracle environment
                  if not self.oracle_home:
                      raise ValueError("ORACLE_HOME not set. Either pass it to the constructor or set it in environment.")
                  
                  if not self.oracle_sid:
                      raise ValueError("ORACLE_SID not set. Either pass it to the constructor or set it in environment.")
              
              def execute_query(self, sql_query, formatting="default"):
                  """
                  Execute an Oracle SQL query via SQLPlus
                  
                  Args:
                      sql_query (str): SQL query to execute
                      formatting (str): Output format ('default', 'csv', 'json')
                      
                  Returns:
                      str: Query results as formatted text
                  """
                  # Create temporary SQL file
                  with tempfile.NamedTemporaryFile(mode='w+', suffix='.sql', delete=False) as sql_file:
                      sql_path = sql_file.name
                      
                      # Prepare SQL formatting
                      if formatting == "csv":
                          sql_file.write("SET PAGESIZE 0\n")
                          sql_file.write("SET FEEDBACK OFF\n")
                          sql_file.write("SET HEADING ON\n")
                          sql_file.write("SET MARKUP CSV ON\n")
                      else:
                          sql_file.write("SET PAGESIZE 50000\n")
                          sql_file.write("SET LINESIZE 1000\n")
                          sql_file.write("SET FEEDBACK OFF\n")
                          sql_file.write("SET VERIFY OFF\n")
                          sql_file.write("SET HEADING ON\n")
                      
                      # Add the main query
                      sql_file.write(f"{sql_query}\n")
                      sql_file.write("EXIT;\n")
                  
                  try:
                      # Build sqlplus command
                      cmd = ["sqlplus", "-S"]
                      
                      # Add SYSDBA if needed
                      if self.use_sysdba:
                          cmd.extend(["/ as sysdba"])
                      else:
                          cmd.extend(["/"])
                      
                      # Create environment with Oracle settings
                      env = os.environ.copy()
                      env["ORACLE_HOME"] = self.oracle_home
                      env["ORACLE_SID"] = self.oracle_sid
                      env["PATH"] = f"{self.oracle_home}/bin:{env.get('PATH', '')}"
                      env["LD_LIBRARY_PATH"] = f"{self.oracle_home}/lib:{env.get('LD_LIBRARY_PATH', '')}"
                      
                      # Execute SQLPlus with the SQL file
                      result = subprocess.run(
                          f"sqlplus -S {'' if not self.use_sysdba else 'as sysdba '} @{sql_path}",
                          shell=True,
                          env=env,
                          capture_output=True,
                          text=True
                      )
                      
                      output = result.stdout
                      
                      # Convert to JSON if requested
                      if formatting == "json" and output.strip():
                          # Parse CSV output into JSON
                          csv_reader = csv.DictReader(output.strip().split('\n'))
                          json_data = [row for row in csv_reader]
                          return json.dumps(json_data, indent=2)
                      
                      return output
                  
                  finally:
                      # Clean up temporary SQL file
                      if os.path.exists(sql_path):
                          os.unlink(sql_path)
              
              def execute_script(self, script_path):
                  """
                  Execute an Oracle SQL script via SQLPlus
                  
                  Args:
                      script_path (str): Path to SQL script file
                      
                  Returns:
                      str: Script execution results
                  """
                  if not os.path.exists(script_path):
                      raise FileNotFoundError(f"SQL script not found: {script_path}")
                  
                  # Build sqlplus command
                  cmd = ["sqlplus", "-S"]
                  
                  # Add SYSDBA if needed
                  if self.use_sysdba:
                      cmd.extend(["/ as sysdba"])
                  else:
                      cmd.extend(["/"])
                  
                  # Create environment with Oracle settings
                  env = os.environ.copy()
                  env["ORACLE_HOME"] = self.oracle_home
                  env["ORACLE_SID"] = self.oracle_sid
                  env["PATH"] = f"{self.oracle_home}/bin:{env.get('PATH', '')}"
                  env["LD_LIBRARY_PATH"] = f"{self.oracle_home}/lib:{env.get('LD_LIBRARY_PATH', '')}"
                  
                  # Execute SQLPlus with the script file
                  result = subprocess.run(
                      f"sqlplus -S {'' if not self.use_sysdba else 'as sysdba '} @{script_path}",
                      shell=True,
                      env=env,
                      capture_output=True,
                      text=True
                  )
                  
                  return result.stdout
              
              def get_table_structure(self, table_name, schema=None):
                  """
                  Get table structure details
                  
                  Args:
                      table_name (str): Name of the table
                      schema (str): Optional schema name
                      
                  Returns:
                      str: Table structure as text
                  """
                  full_table = f"{schema}.{table_name}" if schema else table_name
                  query = f"DESCRIBE {full_table};"
                  return self.execute_query(query)
              
              def get_tablespaces(self):
                  """Get tablespace usage information"""
                  query = """
                  SELECT
                      tablespace_name,
                      size_mb,
                      free_mb,
                      max_size_mb,
                      max_free_mb,
                      ROUND((max_size_mb - max_free_mb) / max_size_mb * 100, 2) AS used_pct
                  FROM (
                      SELECT
                          a.tablespace_name,
                          b.size_mb,
                          a.free_mb,
                          b.max_size_mb,
                          a.free_mb + (b.max_size_mb - b.size_mb) AS max_free_mb
                      FROM
                          (SELECT
                              tablespace_name,
                              ROUND(SUM(bytes) / 1048576, 2) AS free_mb
                           FROM dba_free_space
                           GROUP BY tablespace_name) a,
                          (SELECT
                              tablespace_name,
                              ROUND(SUM(bytes) / 1048576, 2) AS size_mb,
                              ROUND(SUM(GREATEST(bytes, maxbytes)) / 1048576, 2) AS max_size_mb
                           FROM dba_data_files
                           GROUP BY tablespace_name) b
                      WHERE a.tablespace_name = b.tablespace_name
                  )
                  ORDER BY used_pct DESC;
                  """
                  return self.execute_query(query)
              
              def get_db_version(self):
                  """Get Oracle database version"""
                  return self.execute_query("SELECT * FROM v$version;")
          
          if __name__ == "__main__":
              # Example usage
              import sys
              
              # Get environment variables from command line if provided
              oracle_home = sys.argv[1] if len(sys.argv) > 1 else os.environ.get("ORACLE_HOME")
              oracle_sid = sys.argv[2] if len(sys.argv) > 2 else os.environ.get("ORACLE_SID")
              
              try:
                  # Create the Oracle runner with SYSDBA privileges
                  oracle = OracleRunner(oracle_home, oracle_sid, use_sysdba=True)
                  
                  # Run a simple test query
                  print("Database Version:")
                  print(oracle.get_db_version())
                  
                  print("\nTablespace Usage:")
                  print(oracle.get_tablespaces())
                  
              except Exception as e:
                  print(f"Error: {e}", file=sys.stderr)
                  sys.exit(1)
        mode: '0644'

    # Step 6: Create example scripts
    - name: Create example script for database status
      copy:
        dest: "{{ scripts_dir }}/python/check_db_status.py"
        content: |
          #!/usr/bin/env python3
          """
          Example script to check Oracle database status
          """
          
          import os
          import sys
          import json
          from oracle_utils import OracleRunner
          
          # Get environment variables
          oracle_home = os.environ.get("ORACLE_HOME")
          oracle_sid = os.environ.get("ORACLE_SID")
          
          try:
              # Create Oracle runner with SYSDBA privileges
              oracle = OracleRunner(oracle_home, oracle_sid, use_sysdba=True)
              
              # Check database instance status
              print("Database Instance Status:")
              instance_query = """
              SELECT instance_name, status, database_status 
              FROM v$instance;
              """
              print(oracle.execute_query(instance_query))
              
              # Check tablespace usage
              print("\nTablespace Usage:")
              print(oracle.get_tablespaces())
              
              # Check session count
              print("\nActive Sessions:")
              session_query = """
              SELECT username, count(*) as session_count
              FROM v$session
              WHERE username IS NOT NULL
              GROUP BY username
              ORDER BY session_count DESC;
              """
              print(oracle.execute_query(session_query))
              
          except Exception as e:
              print(f"Error: {e}", file=sys.stderr)
              sys.exit(1)
        mode: '0755'

    - name: Create example script for running custom queries
      copy:
        dest: "{{ scripts_dir }}/python/run_query.py"
        content: |
          #!/usr/bin/env python3
          """
          Example script to run custom Oracle SQL queries
          
          Usage:
            python run_query.py "SELECT * FROM my_table" [json|csv]
          """
          
          import os
          import sys
          from oracle_utils import OracleRunner
          
          # Check arguments
          if len(sys.argv) < 2:
              print("Usage: python run_query.py \"SQL QUERY\" [json|csv]")
              print("Example: python run_query.py \"SELECT * FROM v\$version\" json")
              sys.exit(1)
              
          sql_query = sys.argv[1]
          format_type = sys.argv[2] if len(sys.argv) > 2 else "default"
          
          # Get environment variables
          oracle_home = os.environ.get("ORACLE_HOME")
          oracle_sid = os.environ.get("ORACLE_SID")
          
          try:
              # Create Oracle runner with SYSDBA privileges
              oracle = OracleRunner(oracle_home, oracle_sid, use_sysdba=True)
              
              # Execute the query
              result = oracle.execute_query(sql_query, formatting=format_type)
              print(result)
              
          except Exception as e:
              print(f"Error: {e}", file=sys.stderr)
              sys.exit(1)
        mode: '0755'

    # Step 7: Create activation script to set up environment
    - name: Create activation script
      copy:
        dest: "{{ ansible_env.HOME }}/activate_oracle_env.sh"
        content: |
          #!/bin/bash
          
          # Set up Oracle environment
          source {{ scripts_dir }}/set_oracle_env.sh
          
          # Activate Python virtual environment
          source {{ venv_dir }}/bin/activate
          
          # Add scripts directory to Python path
          export PYTHONPATH={{ scripts_dir }}/python:$PYTHONPATH
          
          echo "Oracle environment activated. You can now run Oracle commands with Python."
          echo "Example usage:"
          echo "  python {{ scripts_dir }}/python/check_db_status.py"
          echo "  python {{ scripts_dir }}/python/run_query.py \"SELECT * FROM v\$version\""
        mode: '0755'

    - name: Add environment shortcut to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias activate_oracle="source {{ ansible_env.HOME }}/activate_oracle_env.sh"'
        state: present