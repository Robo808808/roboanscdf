venv_dir: /tmp/oracle_health_venv
script_path: "{{ role_path }}/files/codbcr-in.py"

- name: Find available Python versions in /bin
  find:
    paths: /bin
    patterns: "^python3\\.[0-9]+$"
    use_regex: true
    file_type: file
  register: python_binaries

- name: Select the highest Python version
  set_fact:
    selected_python: "{{ python_binaries.files | map(attribute='path') | sort | last }}"

- name: Check if venv module is available
  command: "{{ selected_python }} -m venv --help"
  register: venv_check
  changed_when: false
  ignore_errors: true

- name: Fail if venv not available
  fail:
    msg: >
      Python venv module is not available in {{ selected_python }}.
      Please ensure the python3-venv package is installed.
  when: venv_check.rc != 0

- name: Create virtual environment
  command: "{{ selected_python }} -m venv {{ venv_dir }}"
  args:
    creates: "{{ venv_dir }}/bin/activate"

- name: Run the Oracle health check script
  command: "{{ venv_dir }}/bin/python {{ script_path }}"
  environment:
    ORACLE_HOME: "{{ oracle_home | default(omit) }}"
    ORACLE_SID: "{{ oracle_sid | default(omit) }}"

- name: Find generated HTML report on remote host
  shell: ls -1t /tmp/oracle_status_report_*.html | head -n 1
  register: report_path_result
  changed_when: false

- name: Set fact for remote report path
  set_fact:
    remote_report_path: "{{ report_path_result.stdout }}"

- name: Copy HTML report to control machine
  fetch:
    src: "{{ remote_report_path }}"
    dest: "{{ playbook_dir }}/reports/"
    flat: yes
  register: fetched_report

- name: Set fact for local report path
  set_fact:
    local_report_path: "{{ fetched_report.dest }}"

- name: Gather host metadata and save to file
  shell: |
    {
      echo "hostname={{ ansible_hostname }}"
      echo "os={{ ansible_distribution }} {{ ansible_distribution_version }}"
      echo "kernel={{ ansible_kernel }}"
      echo "uptime={{ lookup('pipe', 'uptime -p') }}"
    } > {{ venv_dir }}/report_meta.txt

- name: Save metadata to file for inclusion in report summary
  copy:
    dest: "{{ venv_dir }}/report_meta.txt"
    content: |
      {{ host_meta.stdout_lines | join('\n') }}

- name: Fetch report metadata file to control machine
  fetch:
    src: "{{ venv_dir }}/report_meta.txt"
    dest: "{{ playbook_dir }}/reports/report_meta_{{ inventory_hostname }}.txt"
    flat: true
  register: fetched_meta

-- name: Parse summary and email report
   delegate_to: localhost
   run_once: true
   shell: |
     summary=$(python3 ./parse_report_summary.py "{{ local_report_path }}")
     python3 ./email_report.py \
       --subject "Oracle Health Report: { { inventory_hostname } }" \
      --attach "{ { local_report_path } }" \
      --body "$summary"

