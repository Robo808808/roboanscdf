---
- name: Oracle Services Discovery
  hosts: oracle_servers
  become: yes
  become_user: oracle
  gather_facts: yes
  vars:
    report_path: "/tmp/oracle_report_{{ ansible_date_time.date }}.html"
    timestamp: "{{ ansible_date_time.iso8601 }}"

  tasks:
    - name: Ensure temporary directory exists
      file:
        path: /tmp/oracle_discovery
        state: directory
        mode: '0755'
      become: yes

    - name: Copy discovery script
      copy:
        dest: /tmp/oracle_discovery/discover_oracle.sh
        content: |
          #!/bin/bash
          set -e
          
          # Function to log errors
          log_error() {
            echo "ERROR: $1" >&2
            echo "$1" >> /tmp/oracle_discovery/error.log
          }
          
          # Function to get database role
          get_db_role() {
            local SID=$1
            echo "Checking role for $SID..." >&2
            
            # Set Oracle environment
            export ORACLE_SID=$SID
            export ORAENV_ASK=NO
            . /usr/local/bin/oraenv > /dev/null 2>&1 || { log_error "Failed to set environment for $SID"; return 1; }
            
            # Check if we can connect
            sqlplus -s / as sysdba << EOF
            SET HEAD OFF FEEDBACK OFF PAGESIZE 0 VERIFY OFF ECHO OFF TIMING OFF
            WHENEVER SQLERROR EXIT 1
            SELECT database_role FROM v\$database;
            EXIT
            EOF
          }
          
          # Function to check primary database
          check_primary() {
            local SID=$1
            echo "Checking primary database $SID..." >&2
            
            # Set Oracle environment
            export ORACLE_SID=$SID
            export ORAENV_ASK=NO
            . /usr/local/bin/oraenv > /dev/null 2>&1 || { log_error "Failed to set environment for $SID"; return 1; }
            
            # Check connection count
            sqlplus -s / as sysdba << EOF
            SET HEAD OFF FEEDBACK OFF PAGESIZE 0 VERIFY OFF ECHO OFF TIMING OFF
            WHENEVER SQLERROR EXIT 1
            SELECT COUNT(*) FROM v\$session WHERE type = 'USER';
            EXIT
            EOF
          }
          
          # Function to check standby database MRP
          check_standby() {
            local SID=$1
            echo "Checking standby database $SID..." >&2
            
            # Set Oracle environment
            export ORACLE_SID=$SID
            export ORAENV_ASK=NO
            . /usr/local/bin/oraenv > /dev/null 2>&1 || { log_error "Failed to set environment for $SID"; return 1; }
            
            # Check MRP status
            MRP_STATUS=$(sqlplus -s / as sysdba << EOF
            SET HEAD OFF FEEDBACK OFF PAGESIZE 0 VERIFY OFF ECHO OFF TIMING OFF
            WHENEVER SQLERROR EXIT 1
            SELECT COUNT(*) FROM v\$managed_standby WHERE process LIKE 'MRP%';
            EXIT
            EOF
            )
            
            # Check apply lag
            if [ "$MRP_STATUS" -gt "0" ]; then
              LAG=$(sqlplus -s / as sysdba << EOF
              SET HEAD OFF FEEDBACK OFF PAGESIZE 0 VERIFY OFF ECHO OFF TIMING OFF
              WHENEVER SQLERROR EXIT 1
              SELECT ROUND((SYSDATE - MAX(completion_time)) * 24 * 60, 2) FROM v\$archived_log WHERE applied = 'YES';
              EXIT
              EOF
              )
              echo "$LAG"
            else
              echo "NOT_RUNNING"
            fi
          }
          
          # Function to check listeners
          check_listeners() {
            local ORACLE_HOME=$1
            local SID=$2
            
            echo "Checking listeners for $SID..." >&2
            
            # Check if listener.ora exists
            if [ ! -f "$ORACLE_HOME/network/admin/listener.ora" ]; then
              echo "NO_LISTENER_FILE"
              return
            fi
            
            # Extract listener names
            LISTENERS=$(grep -E "^[A-Za-z0-9_]+ =" "$ORACLE_HOME/network/admin/listener.ora" | cut -d'=' -f1 | tr -d ' ')
            
            if [ -z "$LISTENERS" ]; then
              echo "NO_LISTENERS_DEFINED"
              return
            fi
            
            # Check each listener
            RESULTS=""
            for LISTENER in $LISTENERS; do
              STATUS=$(lsnrctl status $LISTENER | grep -E "STATUS|Service|Version|Start Date")
              if echo "$STATUS" | grep -q "STATUS.*READY"; then
                SERVICES=$(echo "$STATUS" | grep -c "Service")
                RESULTS="${RESULTS}LISTENER:${LISTENER}:UP:${SERVICES};"
              else
                RESULTS="${RESULTS}LISTENER:${LISTENER}:DOWN:0;"
              fi
            done
            
            echo "$RESULTS"
          }
          
          # Main script
          echo "Starting Oracle services discovery..." >&2
          
          if [ ! -f /etc/oratab ]; then
            log_error "oratab file not found!"
            exit 1
          fi
          
          # Process oratab file
          cat /etc/oratab | grep -v "^#" | grep -v "^$" | while IFS=: read -r SID ORACLE_HOME STATUS; do
            if [ "$STATUS" != "Y" ] && [ "$STATUS" != "y" ]; then
              echo "$SID:IGNORED::-"
              continue
            fi
            
            # Get database role
            DB_ROLE=$(get_db_role "$SID" 2>/dev/null) || { echo "$SID:ERROR::$(cat /tmp/oracle_discovery/error.log 2>/dev/null || echo 'Unknown error')"; continue; }
            
            if [ "$DB_ROLE" = "PRIMARY" ]; then
              # Check primary database
              CONNECTIONS=$(check_primary "$SID" 2>/dev/null) || CONNECTIONS="ERROR"
              LISTENERS_STATUS=$(check_listeners "$ORACLE_HOME" "$SID" 2>/dev/null) || LISTENERS_STATUS="ERROR"
              echo "$SID:PRIMARY:$CONNECTIONS:$LISTENERS_STATUS"
            elif [ "$DB_ROLE" = "PHYSICAL STANDBY" ]; then
              # Check standby database
              LAG=$(check_standby "$SID" 2>/dev/null) || LAG="ERROR"
              LISTENERS_STATUS=$(check_listeners "$ORACLE_HOME" "$SID" 2>/dev/null) || LISTENERS_STATUS="ERROR"
              echo "$SID:STANDBY:$LAG:$LISTENERS_STATUS"
            else
              echo "$SID:UNKNOWN::$DB_ROLE"
            fi
          done
        mode: '0755'

    - name: Run Oracle discovery script
      shell: /tmp/oracle_discovery/discover_oracle.sh
      register: discovery_output
      ignore_errors: yes

    - name: Debug discovery output
      debug:
        var: discovery_output.stdout_lines
        verbosity: 1

    - name: Parse discovery output
      set_fact:
        oracle_databases: "{{ oracle_databases | default([]) + [{'sid': item.split(':')[0], 
                                                            'role': item.split(':')[1], 
                                                            'metric': item.split(':')[2], 
                                                            'listeners': item.split(':')[3]}] }}"
      loop: "{{ discovery_output.stdout_lines }}"
      when: "':' in item"

    - name: Generate HTML report
      template:
        src: oracle_report.html.j2
        dest: "{{ report_path }}"

    - name: Display report location
      debug:
        msg: "Oracle services report generated at {{ report_path }}"

    - name: Clean up temporary files
      file:
        path: /tmp/oracle_discovery
        state: absent
      become: yes